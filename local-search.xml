<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>德语写作顺承关系词使用</title>
    <link href="/2025/01/07/%E4%BD%BF%E7%94%A8%E9%A1%BA%E6%89%BF%E5%85%B3%E7%B3%BB%E8%AF%8D/"/>
    <url>/2025/01/07/%E4%BD%BF%E7%94%A8%E9%A1%BA%E6%89%BF%E5%85%B3%E7%B3%BB%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<p>要写出流畅的过渡句，可以使用以下策略和句型来连接不同的段落或主题：</p><hr><h3 id="1-使用顺承关系词：继续谈论相关主题"><strong>1. 使用顺承关系词：继续谈论相关主题</strong></h3><p>这些词语可以帮助自然地引出下一个话题：</p><ul><li><strong>Außerdem</strong> (此外)</li><li><strong>Danach</strong> (之后)</li><li><strong>Dann</strong> (然后)</li><li><strong>Weiterhin</strong> (进一步地)</li><li><strong>Zudem</strong> (此外)</li></ul><p><strong>示例：</strong></p><ol><li><strong>Einleitung nach der Begrüßung:</strong><br><em>Ich freue mich sehr, dass du bald nach Shanghai kommst. Sicher hast du viele Fragen und ich helfe dir gern.</em></li><li><strong>Von Thema 1 zu Thema 2:</strong><br><em>Außerdem gibt es in Shanghai viele Möglichkeiten, die Freizeit zu genießen.</em></li></ol><hr><h3 id="2-使用因果关系词：解释理由或结果"><strong>2. 使用因果关系词：解释理由或结果</strong></h3><ul><li><strong>Deshalb</strong> (因此)</li><li><strong>Darum</strong> (所以)</li><li><strong>Aus diesem Grund</strong> (出于这个原因)</li><li><strong>Weil</strong> (因为)</li></ul><p><strong>示例：</strong></p><ol><li><strong>Von Thema 2 zu Thema 3:</strong><br><em>Weil viele junge Menschen gerne in Parks oder Cafés Zeit verbringen, kannst du dort leicht neue Kontakte knüpfen.</em></li></ol><hr><h3 id="3-使用对比关系词：强调不同或相似之处"><strong>3. 使用对比关系词：强调不同或相似之处</strong></h3><ul><li><strong>Einerseits … andererseits …</strong> (一方面……另一方面……)</li><li><strong>Im Gegensatz dazu</strong> (与此相反)</li><li><strong>Während</strong> (然而)</li></ul><p><strong>示例：</strong></p><ol><li><strong>Von Thema 3 zu Thema 4:</strong><br><em>Während die Stadt viele Aktivitäten bietet, gibt es auch schöne Orte außerhalb von Shanghai für einen Wochenendausflug.</em></li></ol><hr><h3 id="4-使用总结和强调的表达"><strong>4. 使用总结和强调的表达</strong></h3><ul><li><strong>Zusammenfassend kann man sagen, dass…</strong> (总结来说，可以说……)</li><li><strong>Zum Schluss möchte ich sagen, dass…</strong> (最后，我想说……)</li><li><strong>Ich hoffe, dass diese Informationen hilfreich für dich sind.</strong> (我希望这些信息对你有帮助。)</li></ul><hr><h3 id="具体应用示例："><strong>具体应用示例：</strong></h3><p><strong>Übergang von Thema 1 zu Thema 2:</strong><br><em>Nachdem du den besten Weg zur Arbeit gefunden hast, kannst du dich auf die Freizeitaktivitäten konzentrieren.</em></p><p><strong>Übergang von Thema 2 zu Thema 3:</strong><br><em>Wenn du deine Freizeit genießt, wirst du sicher auch neue Leute kennenlernen wollen.</em></p><p><strong>Übergang von Thema 3 zu Thema 4:</strong><br><em>Wenn du neue Kontakte geknüpft hast, kannst du mit ihnen auch Ausflüge am Wochenende planen.</em></p><hr><p>这些句子和技巧可以帮助你的作文结构更加连贯和自然！需要进一步的例子或帮助，可以继续讨论。</p>]]></content>
    
    
    <categories>
      
      <category>德语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>德语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>德语大一上期末写作范例</title>
    <link href="/2025/01/07/%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0%E5%A4%A7%E4%B8%80%E4%B8%8A%E6%9C%9F%E6%9C%AB/"/>
    <url>/2025/01/07/%E5%86%99%E4%BD%9C%E7%AC%94%E8%AE%B0%E5%A4%A7%E4%B8%80%E4%B8%8A%E6%9C%9F%E6%9C%AB/</url>
    
    <content type="html"><![CDATA[<p>Lieber Anna,</p><p>wie geht es Dir? Wir haben uns lange nicht mehr gesehen.</p><p>Komm doch mal in Wien! Du bist herzlich eingeladen. Ich könnte eine kleine Stadtführung durch die Altstadt für Dich gehen und anschließend können wir uns Schloss Schönbrunn schauen. Und Du kannst unbedingt mit mir in mein Lieblingskaffehaus gehen. Hast Du auch Lust auf ein Museum? In Wien gibt es sehr viele bekannte Museums und Ausstellungen.</p><p>Und natürlich kannst Du hier in Wien die berühmte Sachertorte probieren oder Apfelstrudel- der schmeckt nirgends so lecker wie bei uns! Bitte komm! Ich freue mich sehr über Dich!</p><p>Viele Grüßen</p><p>Mila</p><p>Liebe Sabrina,</p><p>wie geht es dir? Wie schön, dass du in dein Sommerferien einen Sprachkurs in Spanien machen möchtest!  Ich finde die Idee super, weil du nicht nur Spanisch lernen, sondern auch die spanische Kultur und das Leben dort erleben kannst.</p><p>Spanisch in Spanien zu lernen hat viele Vorteile. Zum Beispiel kannst du jeden Tag mit Einheimischen sprechen. So lernst du die Sprache viel schneller und verbesserst dabei deine Aussprache. Es ist wunderbar, die Ferien in Spanien zu verbringen, weil das Land sehr schön ist. Es gibt dort freundliche Leute und leckeres Essen. Besonders in der Sonne am Strand kann man die Zeit sehr genießen.</p><p>Auf die Reise musst du dich gut vorbereiten. Zuerst sollest du ein Flugticket und eine Unterkunft(z.B. ein Hotel) buchen. Außerdem brauchst du einen gültigen Reisepass. Um dich dort besser verständigen zu können, könntest du auch ein bisschen Spanisch vor der Abreise lernen.</p><p>Deshalb mächte ich gerne mitkommen. Es macht mehr Spaß, wenn wir zusammen reisen. Vielleicht können wir am Nachmittag nach dem Sprachkurs gemeinsam die Stadt erkunden.</p><p>Ich freue mich auf dich!</p><p>Viele Grüßen</p><p>Mila</p><p>Lieber Lukas,</p><p>vielen Dank für deinen Brief! Wie geht es dir?</p><p>Du fragst, wie man am besten zur Arbeit pendeln kann. Ich glaube, U-Bahn ist am schnellsten und am billigsten. Eine Taxifahrt ist sehr teuer, und mit dem Bus zu fahren kostet oft viel Zeit.</p><p>Es gibt große Unterschiede in den Freizeitbeschäftigungen zwischen deutschen und chinesischen jungen Leute. In Deutschland wandern sie gern in der Natur, während junge Leute in Shanghai den “Citywalk” bevorzugen und gern die Stadt erkundet.</p><p>Ich glaube, du willst neue Leute kennenlernen. Dann kannst du dich bei einem Verein oder einem Club anmelden. Am Wochenende möchtest du einen Ausflug machen? Du kannst an den Dishui See gehen, die Landschaft dort ist sehr schön. Trotz der Entfernung ist Suzhou auch ein gutes Ziel, denn die kleine Stadt ist bekannt für ihre wunderschönen Gärten.</p><p>Ich hoffe, dass meine Tipps dir weiter helfen. Schreib mir doch bald. Ich warte auf deine Email!</p><p>Liebe Grüße</p><p>A</p><p>Liebe Lukas,</p><p>schön, dann du bald ein Praktikum in Shanghai machst. Ich freue mich schon darauf.</p><p>Du fragst,  wie man am besten zur Arbeit pendeln kann. Ich denke, normalweise nimmt man das Bus oder die U-Bahn. Wenn die Strecke nicht zu lang ist, kann man auch mit dem Fahrrad fahren.</p><p>Du wolltest auch wissen, was junge Leute in Shanghai gern in der Freizeit machen und wo man Kontakt zu ihnen finden kann. Tja, das Leben junger Menschen hier ist eigentlich gar nichts so anders als deines. Oft machen wir mit einigen Freunden einen Spaziergang durch die Stadt, trinken Kaffee und unterhalten uns. Wir gehen auch gern ins Kino oder Theater. Du kannst dort viele junge Leute kennenlernen.</p><p>Also, in Shanghai gibt es wirklich viele Möglichkeiten, Spaß zu haben. Du kannst einfach das machen, worauf du Lust hast. Ich empfehle dir, dass du am Wochenende zum Ausflug auf Chongming Insel fährst, denn es gibt dort wunderschöne Landschaft.</p><p>Antworte mir bitte bald.</p><p>Liebe Grüße</p><p>Liebe Lisa,</p><p>vielen Dank für deinen Brief. Ich habe mich sehr darüber gefreut.</p><p>Du fragst, dass wie man am besten eine Unterkunft finden kann. Ich bin der Meinung, dass im Stadtzentrum zu wohnen am besten ist, weil alles dort in der Nähe ist.</p><p>Auch willst du die Sehenswürdigkeiten in Peking wissen. Tja, das hängt von deinem Interesse ab. Wenn du dich für die Kultur und Geschichte interesiert, der Tiananmen Platz und die Verbotene Stadt sind besonders sehenswert. Aber wenn du die schöne Landschaft besichtigen möchtest, die Große Mauer ist auch sehr gut.</p><p>Außerdem sind die Gerichte in Peking sehr lecker. Du sollst die Peking-Ente probieren. Sie schmeckt dir unbedingt gut.</p><p>Übrigens ist das Wetter im Sommer in Peking sehr warm. Du musst viele T-Shirts mitbringen.</p><p>Ich hoffe, dass meine Tipps dir weiter helfen. Schreib mir doch bald. Ich warte auf deine Email!</p><p>Liebe Grüße</p><p>Wen Daining.</p>]]></content>
    
    
    <categories>
      
      <category>德语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>德语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>德语大一上期末复习</title>
    <link href="/2025/01/07/%E5%A4%A7%E4%B8%80%E4%B8%8A%E6%9C%9F%E6%9C%AB%E8%AF%BE%E6%9C%AC%E5%A4%8D%E4%B9%A0/"/>
    <url>/2025/01/07/%E5%A4%A7%E4%B8%80%E4%B8%8A%E6%9C%9F%E6%9C%AB%E8%AF%BE%E6%9C%AC%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>Lek15-18</h1><ul><li><p>sich anmelden zu etw 报名，登记</p></li><li><p>sich entschuldigen bei jm. für A</p></li><li><p>sich erkundigen bei jm nach etw</p></li><li><p><strong>bei jm für etw</strong> 和 <strong>bei jm nach etw</strong> 是两个很常见的结构，至于到底是für还是nach可以看语义的</p></li><li><p>sich langweilen mit D</p></li><li><p>sich etwas vorstellen 想象</p></li><li><p>sich beeilen 赶时间</p></li><li><p>sich bewerben um etw 申请（有竞争的意味）</p></li><li><p>sich umsehen 到处看</p></li><li><p>sich vergnügen 娱乐</p></li><li><p>问路:Wie komme ich nach…</p></li><li><p>das Turnier 比赛、竞赛</p></li><li><p>die Sporthalle 体育馆</p></li><li><p>an etwas teilnehmen 参加</p></li><li><p>wählen zwischen D 从…中选择</p></li><li><p>sonst 否则</p></li><li><p>entwerten 激活</p></li><li><p>Grenze 边界</p></li><li><p>je nach D 视…而定 = Das hängt von … ab</p></li><li><p>Entfernung 距离</p></li><li><p>der Laden 店铺</p></li><li><p>Ich gehe einfach weiter. 我干脆继续走了</p></li><li><p>Ich fahre <strong>erleichtert</strong> nach Hause. 一身轻松地</p></li><li><p>regelten 用某种规章制度来管理</p></li><li><p>begleiteten A 陪伴</p></li><li><p>z.B. Sondern begleitete mich auch noch ein Stück. <strong>ein Stück 一段路</strong></p></li><li><p>die Umwelt 环境-  umweltfreundlich 环保的</p></li><li><p>die Leistungen 成绩</p></li><li><p>der Vortrag halten 开讲座</p></li><li><p>das Referat 课堂报告</p></li><li><p>gilt als = (in Englisch)works as, functions as…</p></li><li><p>sich anmelden/einschreiben 报到</p></li><li><p>das Turnen 体操</p></li><li><p>die Leichtathletik 田径</p></li><li><ul><li>laufen 跑</li><li>springen 跑</li><li>joggen</li></ul></li><li><p>Es gibt grundlegende Unterschiede 这存在根本上的区别</p></li><li><p>halten den Schläger wie Essstäbchen/Messer und Gabel</p></li><li><p>regagieren A 对…做出反应</p></li><li><p>aus Spaß spielen 处于乐趣来玩</p></li><li><p>为什么年轻人喜欢极限运动？ -Viele junge Menschen treiben diesen Sport wegen der Gefahr und Spannung.</p></li><li><p>课文金句 Die körplicher Bewegung ist eine nötige Abwechslung in einer Technisierten Welt.</p></li><li><p>dynamisch-abwechslungsreich 动态的、有活力的</p></li><li><p>Sport macht Spaß und bietet Spannung.</p></li><li><p>im Fernsehen übertragen 在电视转播</p></li><li><p>Im Stadion ist es viel spannender, die Menschen, die Jubel, die ganze Atmosphäre.</p></li><li><p>Angst vor etwas haben</p></li><li><p>描述一个休闲、爱好 ein guter <strong>Ausgleich</strong> zur Arbeit und zum Stress <strong>平衡、调剂</strong></p></li><li><p>sich entwickeln 发展</p></li><li><p>entwickeln 开发、发明</p></li><li><p>Es fällt mir auf, … 我注意到</p></li><li><p>Es hängt davon ab, … 这取决于…</p></li><li><p>einsam 孤独的</p></li><li><p>traurig 悲伤的</p></li><li><p>erfahren-wissen</p></li><li><p>suchen-finden</p></li><li><p>finden-<strong>feststellen</strong> (得出结论 瞬间的)</p></li><li><p>der Lebensstteil bewusst wählen 有意选择生活方式</p></li><li><p>(sich) Zeit nehmen für A 抽出时间干…</p></li><li><p>schaffen</p></li><li><ul><li>geschaffen 创作</li><li>geschafft 搞定</li></ul></li><li><p>überfallen 抢劫</p></li><li><p>转折</p></li><li><ul><li>obwohl (先行词)</li><li>trotzdem (adv.)</li><li>trotz G (präp.)</li></ul></li><li><p>Ich habe keine Ahnung davon.</p></li><li><p>zugleich 同时</p></li><li><p>mit</p></li><li><ul><li>jm umgehen 与某人周旋</li><li>etw umgehen 搞定某事</li></ul></li><li><p>vielleicht=wahrscheinlich</p></li><li><p>immerhin=wiesowie 反正</p></li><li><p>losgehen 动身</p></li><li><p>Darüber hinaus= außerdem</p></li><li><p>Es ist allen bekannt, dass…</p></li><li><p>die Pflicht 义务</p></li><li><p>raten zu 劝告</p></li><li><p>versuchen 计划去做</p></li><li><p>versprechen D A 承诺</p></li><li><p>sich gewöhnen an… 使习惯于</p></li><li><p>Er ist erlaubt/verboten, …</p></li><li><p>gut ausgebildet 受良好教育的</p></li><li><p>hoch qualifizerte = highly qualified</p></li><li><p>Die Eltern schicken ihre Kinder gern an die berühmten Hochschulen, damit sie eine gute Ausbildung bekommen.</p></li><li><p>Häusliche Erziehung ist sehr wichtig für die Entwicklung der Kinder.</p></li><li><p>Seine Hauptaufgabe <strong>besteht darin</strong>, die Lehrlinge auszubilden. 在于…</p></li><li><p>führen zu = leads to评价？</p></li><li><p>der Verhalten 行为举止</p></li><li><p>Freizeit bedeutet: Zeit ohne Pflichten</p></li><li><p>Sie wollen am Ende ihres Lebens das Rechts aus Ruhe und Freiheit genießen.</p></li><li><p>Obwohl er sehr beschäftigt ist, … 尽管他很忙，…</p></li><li><p>sogenannte 所谓的</p></li><li><p>die Freude 令人开心的事情</p></li><li><p>三个“发生”</p></li><li><ul><li>passiert sein</li><li>geschehen- geschieht (sein)</li><li>vorkommen</li></ul></li><li><p>z.B. Wann die Freude passiert sein…</p></li><li><p>sich die Belastbung leisten 承受压力</p></li><li><p>streng planmäßig leben 过有规律的生活</p></li><li><p>Genussmittel 用以享受的物品</p></li><li><p>sich Wohl fühlen, bequem sein 感到舒适</p></li><li><p>mit A einverstanden sein 同意A</p></li><li><p>sich die Wettkämpfe anschauen 看比赛</p></li></ul><hr><h2 id="连词">连词</h2><p><strong>und aber oder denn(因为) sondern</strong>(而是)</p><p>后加正语序，全部都不占位</p><p><strong>entweder(占)…oder(不占)… 要么要么</strong></p><p><strong>nicht nur…sondern auch… 不仅而且</strong> nicht nur作为一个整体当成nicht/kein来放</p><p><strong>weder(占)…noch(占)…既不也不</strong></p><ul><li><strong>一般加零冠词</strong></li><li>z.B. Weder fahre ich mit dem Bus, noch gehe ich zu Fuß.</li></ul><p><strong>sowohl(不占)…als auch(不占)…既又</strong></p><p><strong>zwar(占)…aber(不占)…虽然但是</strong></p><p><strong>deshalb(占位)(不加从句) 所以</strong></p><p><strong>denn 因为 (不占位)， dann 那么 (占位)</strong></p><p>总结一下：da weil denn deshalb wegen 与因果关系有关</p><hr><h2 id="从句">从句</h2><h3 id="dass-ob">dass-ob</h3><p>Ich weiß (es), dass …<strong>es一定要省略</strong></p><h3 id="weil-da-原因状语从句">weil/da 原因状语从句</h3><p><strong>da：只在原因非常明显时在句首使用</strong></p><h3 id="wenn-falls-条件状语从句">wenn/falls 条件状语从句</h3><p><strong>类似原因状语从句，Falls只能在句首</strong></p><h3 id="让步状语从句-obwohl-尽管">让步状语从句 obwohl 尽管</h3><hr><h2 id="二格">二格</h2><p>ein der größte Stadt in China<br>​=one (of) the largest city in China.</p><p>人名：-s -x -z -ß 结尾的，直接打 **’ **即可</p><hr><h2 id="二格的介词">二格的介词</h2><p><strong>trotz wegen während statt</strong></p><p>während des Aufenthalt in Deutschland 在留德期间</p><hr><h1>Lek 14</h1><ul><li><p>das Geschirr 厨具</p></li><li><p>der Inhalt 内容</p></li><li><p>Das fällt mir ein, … <strong>einfallen使想起</strong></p></li><li><p>Das Wort bestellt aus zwei Teilen.</p></li><li><p>Erst nach meinem Tod bemerkten die Menschen meinen Irrtum.</p></li><li><p>Dann verschieben wir das Theater auf übernächste Woche.</p></li><li><ul><li><strong>动词“verschieben”表示变动</strong>，涉及时间的变化，因此 <strong>auf 后面接第四格</strong></li><li>推迟到某一时间用auf</li></ul></li><li><p>Es geht mir viel besser <strong>als am Anfang</strong>. <strong>als做时间状语</strong></p></li><li><p>das Möbel 家具 - möbliert pII 有家具的</p></li><li><p>Vorteil - Nachteil</p></li><li><p>… ist nicht besonders gut, aber schlecht ist es auch nicht.</p></li><li><p>die Auswahl 选择范围（抽象概念）</p></li><li><p>allgemein 一般的</p></li><li><p>Ich möchte dir gerne mein Zimmer zeigen. Wann kommst du mich besuchen? Hoffentlich bis bald!</p></li><li><p>经常用过去时的时间状语：</p></li><li><ul><li>früher</li><li>vor drei Jahren</li></ul></li><li><p>die Suppe essen</p></li><li><p>schlürfen 发出响声地啜饮</p></li><li><p>ausschlürfen 咕咚咕咚地喝水</p></li><li><p>schmatzen 吃饭吧唧嘴</p></li><li><p>spucken 吐</p></li><li><p>der Befehl 命令，指令</p></li><li><p>vorsichtig 小心的</p></li><li><p>aus/zu machen 开/关</p></li><li><p>im Krankenhaus liegen 住院</p></li><li><p>Ich soll dich sehr herzlich von Herrn Müller grüßen. 我应该代Herr Müller向你问好 <strong>注意Herr是阳性弱变化名词</strong></p></li><li><p>Anschließend 紧接着</p></li><li><p>Wo <strong>liegt</strong> mein <strong>Brille</strong>? 眼镜在哪 用liegen</p></li><li><p>Ich war noch nicht da. 我还从来没去过那</p></li></ul><hr><h1>Lek 13</h1><ul><li><ul><li>die Zukunft 未来</li><li>die Vergangenheit 过去</li><li>die Gegenwart 现在</li></ul></li><li>verwirrt 迷惘的、糊涂的</li><li>hübsch 漂亮的 可爱的</li><li>Er <strong>fiel</strong> sicher <strong>auf</strong> wie <strong>ein bunter Hund</strong>. 他肯定很引人注目</li><li><ul><li>auffallen- auffiel 引人注目</li><li>短语**„auffallen wie ein bunter Hund“**是德语中的一种俗语，比喻某人或某物特别引人注意，就像一只五颜六色的狗在人群中显得格外突出一样</li></ul></li><li>Die Münchner <strong>aßen</strong> <strong>selten</strong> Reis.</li><li><ul><li>aßen - essen的过去式</li><li>selten = (in English) seldom</li></ul></li><li>überraschen 使感到意外 - pII überrascht 感到意外的</li><li>das Schloss 城堡</li><li>der Stadtbummel = citywalk</li><li>die Abkürzung für A   …的缩写</li></ul><hr><h1>Lek 12</h1><ul><li>der Herd 灶</li><li>der Backofen 烤箱</li></ul><p>das Appartement/EInzelzimmer 一室一厅</p><p>玄关：</p><ul><li>die Flur 强调走廊</li><li>die Diele 强调门厅</li></ul><p>vermieten 出租 - mieten 租</p><p>nach+方向</p><ul><li>nach Osten</li><li>nach Süden</li><li>nach Westen</li><li>nach Norden</li><li>nach oben (adv.)</li><li>nach unten (adv.)</li></ul><p>das Haushaltsgeräte 家用电器</p><p>der Sessel 沙发椅</p><p>die Waschmaschine</p><p>das Bücherregal</p><p>die Pflanze 绿植</p><p>der Teppich 地毯</p><p>Besonders für Ausländer ist eine WG sehr <strong>günstig</strong>(有利的). Sie haben Kontakt zu ihren Mitbewohnern und bei Fragen oder Problemen können die Mitbewohner helfen. Natürlich muss jeder Mitbewohner auf die anderen Rücksicht nehmen.</p><p>EIn Zimmer zur Untermiete bedeutet: Ein Student mietet ein Zimmer in einer Wohnung.</p><p>zufrieden 满意的</p>]]></content>
    
    
    <categories>
      
      <category>德语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>德语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大物期末上复习</title>
    <link href="/2025/01/07/%E5%A4%A7%E7%89%A9%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/01/07/%E5%A4%A7%E7%89%A9%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="机械能部分">机械能部分</h2><p>机械能守恒定律：系统只有保守内力做功，质点系的总机械能保持不变</p><p><strong>机械能包括动能和势能（如电势能）</strong></p><p>等价表述：质点组机械能的改变与保守内力无关</p><p>所受合外力为零，内力都是保守力的系统，其机械能必然守恒 <strong>错误</strong></p><p>首先：合外力为零<strong>≠</strong>外力做功为零，考虑两只手拉弹簧即可</p><p>其次：即使合外力为零，系统仍可能受到<strong>外力矩</strong>的作用，外力矩会改变系统的转动动能，从而影响机械能，例如一个刚体在无摩擦的转轴上旋转时，即使合外力为零，外力矩仍可能做功，改变系统的机械能</p><p>König定理<br>$$<br>质点系的总动能=质心对惯性系的动能+各个质点相对于质心的动能<br>\E_k=\frac{1}{2}Mv_c^2+E’k=\frac{1}{2}Mv^2_c+\frac{1}{2} \sum_{i=1}^{n}m_iv^2_{ir}<br>$$</p><h2 id="刚体">刚体</h2><p>平行轴定理：<br>$$<br>对某一轴的转动惯量=对质心轴的转动惯量+m*(质心到某轴的距离)^2 \<br>J_o=J_c+md^2<br>$$</p><h2 id="振动">振动</h2><p>简谐运动的三个特征</p><ul><li><p>力学特征<br>$$<br>F=-kx<br>$$</p></li><li><p>动力学特征<br>$$<br>\frac{d^2x}{dt^2}+\omega x=0<br>$$</p></li><li><p>运动学特征<br>$$<br>x=A\cos (\omega x + \phi)<br>$$</p></li></ul><p>合振动忽强忽弱（振幅忽大忽小）的现象：拍</p><p>拍频：合振动变化的频率</p><h2 id="波">波</h2><h3 id="波的方程">波的方程</h3><p>$$<br>y(x,t)=A\cos[2\pi(\frac{t}{T} \mp \frac{x-x_0}{λ})+φ_0] \<br>取减号：波沿x轴正向传播，反之 \<br>x处的质元比O处的相位落后 \frac{2 \pi x}{λ}<br>$$</p><h3 id="波的能量：">波的能量：</h3><p>在波动过程中任一质元的动能和势能相等且同相位变化，机械能不守恒（因为不是孤立体系）</p><p>能量密度<br>$$<br>\omega = \frac{dE}{dV} = \rho A^2\sin^2\omega(t-\frac{x}{u})<br>$$<br>平均能量密度<br>$$<br>\bar \omega = \frac{1}{2}\rho A^2\omega^2<br>$$<br>能流<br>$$<br>P=\omega u S<br>$$<br>平均能流<br>$$<br>\bar P =\bar \omega u S<br>$$<br>平均能流密度<br>$$<br>I=\frac{\bar P}{S}=\bar \omega u =\frac{1}{2}\rho A^2\omega^2 u<br>$$</p><h3 id="驻波的能量">驻波的能量</h3><p>波节处始终有Ek=0</p><p>在同段内各点通过平衡位置时，动能均最大，波节及其他点Ep=0</p><p>在同段内各点通过最大位移时，动能均趋零，波节及其他点Ep最大</p><h2 id="热力学">热力学</h2><p>等值过程<strong>不一定</strong>是可逆过程，准静态过程<strong>不一定</strong>是可逆过程，<strong>可逆过程一定是准静态过程</strong>，</p>]]></content>
    
    
    <categories>
      
      <category>物理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大学物理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《算法笔记》学习笔记</title>
    <link href="/2025/01/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/01/07/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1>第2章 C/C++快速入门</h1><h2 id="2-1-基本数据类型">2.1 基本数据类型</h2><h3 id="2-1-2-变量类型">2.1.2 变量类型</h3><h4 id="long-long类型赋大于-2-31-1-的初值，需要在初值后面加LL，否则会CE">long long类型赋大于$2^{31}-1$的初值，需要在初值后面加LL，否则会CE</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">long long bignum <span class="hljs-operator">=</span> <span class="hljs-number">1234567890123456</span>LL<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>简而言之，题目要求$10^{9}$以内，就用int；$10^{18}$以内，就用longlong</p><h4 id="浮点型：不要用float，只用double就可以了">浮点型：不要用float，只用double就可以了</h4><h4 id="char：小写字母比大写字母的ASCII值大32">char：小写字母比大写字母的ASCII值大32</h4><p>字符常量必须用单引号标注，以区分是作为字符变量还是字符常量</p><h4 id="转义字符">转义字符</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\n</span> 代表换行<br><span class="hljs-string">\0</span> 代表空字符NULL，其ASCII码为<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="字符串常量：由双引号标记的字符集，可以作为初值赋值给字符数组并使用-s的形式输出">字符串常量：由双引号标记的字符集，可以作为初值赋值给字符数组并使用%s的形式输出</h4><p>不能把字符串常量赋值给字符变量</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">char c<span class="hljs-operator">=</span><span class="hljs-string">&quot;abcd&quot;</span><br></code></pre></td></tr></table></figure><p>的写法是不允许的</p><h4 id="布尔型">布尔型</h4><p>只有0才是False，别的整数都是True</p><h3 id="2-1-3-强制类型转换">2.1.3 强制类型转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 格式">(新类型名)变量名<br></code></pre></td></tr></table></figure><p>如果把一个类型的变量赋值给另一个类型的变量却没有写强转，那么IDE会自动强转<br>但是计算的时候需要强转，那就不能等到算完再强转</p><h3 id="2-1-4-符号常量和const常量">2.1.4 符号常量和const常量</h3><h4 id="格式为">格式为</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> 标识符 常量</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const 数据类型 变量名 <span class="hljs-operator">=</span> 常量<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>常量的值一旦确定之后就不能改变了。</p><p><strong>define除了定义常量以外，还可以定义任何语句或者片段（宏定义），格式如下</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> 标识符 任何语句或者片段</span><br></code></pre></td></tr></table></figure><p>比如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADD(a,b) ((a)+(b)) <span class="hljs-comment">//为什么要加这么多括号？是因为宏定义是直接将对应的部分替换，然后才进行编译和运行</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> num1 =<span class="hljs-number">3</span>, num2 =<span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">prints</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">ADD</span>(num1,num2)); <span class="hljs-comment">//8</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>所以，尽量不要用宏定义来做除了定义常量以外的事情</strong></p><h3 id="2-1-5-运算符">2.1.5 运算符</h3><p>只复习位运算符  <a href="https://oi-wiki.org/math/bit/">详见Oiwiki</a></p><h2 id="2-2-顺序结构">2.2 顺序结构</h2><h4 id="常见数据类型变量的scanf格式符">常见数据类型变量的scanf格式符</h4><table><thead><tr><th>数据类型</th><th>格式符</th></tr></thead><tbody><tr><td>int</td><td>%d</td></tr><tr><td>long long</td><td>%lld</td></tr><tr><td>float</td><td>%f</td></tr><tr><td>double</td><td>%lf</td></tr><tr><td>char</td><td>%c</td></tr><tr><td>字符串(char数组)</td><td>%s</td></tr><tr><td><em>录入字符串不需要加&amp;</em></td><td></td></tr></tbody></table><p>另外，如果要输入“3 4”这种用空格隔开的两个数字，两个%d直接可以不加空格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">int <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>;<br>scanf(&quot;%d%d&quot;, &amp;<span class="hljs-selector-tag">a</span>, &amp;<span class="hljs-selector-tag">b</span>);<br></code></pre></td></tr></table></figure><p>原因：除了%c以外，scanf对于其他格式符(如%d)的输入是以空白符（空格、tab）座位结束判断标志的<br><em>另外，字符数组使用%s读入的时候以空格和换行座位读入结束的标识</em><br><strong>即scanf的%c格式是可以读入空格和换行的！</strong></p><h4 id="常见数据类型变量的printf格式符">常见数据类型变量的printf格式符</h4><table><thead><tr><th>数据类型</th><th>格式符</th></tr></thead><tbody><tr><td>int</td><td>%d</td></tr><tr><td>long long</td><td>%lld</td></tr><tr><td>float</td><td>%f</td></tr><tr><td>double</td><td>%f</td></tr><tr><td>char</td><td>%c</td></tr><tr><td>字符串(char数组)</td><td>%s</td></tr><tr><td>与scanf的区别只在于double</td><td></td></tr></tbody></table><h4 id="三种实用的输出格式">三种实用的输出格式</h4><ol><li>%md<br>%md可以使不足m位的int型变量以m位进行右对齐输出，其中高位用空格补齐，如果变量本身超过m位则保持原样（不会截断）</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;   <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">123</span>, b=<span class="hljs-number">1234567</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d\n&quot;</span>,a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d\n&quot;</span>,b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出格式</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">  <span class="hljs-number">123</span><br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><p>在123的前面补了两个空格<br>2. %0md 补上前导0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;   <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">123</span>, b=<span class="hljs-number">1234567</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d\n&quot;</span>,a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d\n&quot;</span>,b);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出格式</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">00123</span><br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><ol start="3"><li>%.mf 保留m位小数输出（不等价于四舍五入）</li></ol><h3 id="2-2-3-使用getchar和putchar来输入-输出字符">2.2.3 使用getchar和putchar来输入/输出字符</h3><p>getchar用来输入单个字符，putchar用来输出单个字符，在某些scanf函数使用不便的场合可以使用 getchar 来输入字符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span> cl，c2，c3;<br>c1 =<span class="hljs-built_in">getchar</span>();<br><span class="hljs-built_in">getchar</span>();<br>c2 =<span class="hljs-built_in">getchar</span>();<br>c3 = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-built_in">putchar</span>(c1);<br><span class="hljs-built_in">putchar</span>(c2);<span class="hljs-built_in">putchar</span>(c3);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>输入数据</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">abcd</span><br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">acd</span><br></code></pre></td></tr></table></figure><p>此处第一个字符’a’被c1接收;第二个字符’b’虽然被接收，但是没有将它存储在某个变量中;第三个字符c被 c2 接收;第四个字符’d&quot;被 c3 接收。之后，连续三次 putchar 将把 c1、c2、c3 连续输出。而如果输入&quot;ab&quot;，然后按Enter键，再输入c，再按Enter键，输出结果会是这样:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><br>c<br></code></pre></td></tr></table></figure><p>这是因为 getchar 可以识别换行符，所以 c2实际上储存的是换行符\n，因此在a和c之间会有一个换行出现。</p><h3 id="2-2-4注释">2.2.4注释</h3><h3 id="2-2-5-typedef">2.2.5 typedef</h3><p>可以给复杂的数据类型取一个别名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;estdio&gt;</span></span><br>Ltypedef <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<span class="hljs-comment">//给1ong 1ong起个别名</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>LL a=<span class="hljs-number">123456789012345</span>，b=<span class="hljs-number">234567890123456</span>;<span class="hljs-comment">//直接使用 LL</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lld\n&quot;</span>，a+b);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-6-常用math函数">2.2.6 常用math函数</h3><ol><li>fabs(double x)<br>用于对double型变量取绝对值</li><li>floor(double x) ceil(double x)</li><li>pow(double r, double p)<br>返回$r^{p}$</li><li>sqrt(double x)</li><li>log(double x)<br>返回lnx<br><strong>C语言中不能指定底数，因此必须通过换底公式来求。</strong></li><li>sin(double x) cso(double x) tan(double x)<br>要求参数是<strong>弧度制</strong></li><li>asin(double x) acos(double x) atan(double x)<br>反三角函数</li><li>round(double x)<br>将double型变量四舍五入，<strong>返回值仍然是double类型</strong></li></ol><h2 id="2-3-选择结构">2.3 选择结构</h2><h3 id="2-3-1-if语句">2.3.1 if语句</h3><h3 id="2-3-3-switch语句">2.3.3 switch语句</h3><p>记得什么是break穿透</p><h2 id="2-4-循环结构">2.4 循环结构</h2><h3 id="2-4-1-while语句">2.4.1 while语句</h3><h3 id="2-4-2-do…while语句">2.4.2 do…while语句</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        sum += i;<br>        i++;<br>    &#125; <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;The sum of numbers from 1 to 100 is: &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>do…while会先执行循环体一次，再去判断循环条件是不是为真</strong></p><h3 id="2-4-3-for语句">2.4.3 for语句</h3><h3 id="2-4-4-break和continue语句">2.4.4 break和continue语句</h3><h2 id="2-5-数组">2.5 数组</h2><h3 id="2-5-1-一维数组">2.5.1 一维数组</h3><p>记得初赋值，有两种赋值为0的方法：把第一个元素赋为0，或者只用一个大括号表示</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int a[<span class="hljs-number">10</span>]<span class="hljs-operator">=</span>&#123;<span class="hljs-number">0</span>&#125;<span class="hljs-comment">;</span><br>int a[<span class="hljs-number">10</span>]<span class="hljs-operator">=</span>&#123;&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>递推：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for(int i=1;i&lt;10;i++)&#123;<br>    a<span class="hljs-comment">[0]</span> =1;<br>    a<span class="hljs-comment">[1]</span> =1;<br>    a<span class="hljs-comment">[i+1]</span>=a<span class="hljs-comment">[i]</span>+a<span class="hljs-comment">[i-1]</span>;<br>&#125; //斐波那契数列<br></code></pre></td></tr></table></figure><h3 id="2-5-2-冒泡排序">2.5.2 冒泡排序</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs excel">for (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">len</span> - <span class="hljs-number">1</span>; j++)&#123;      //长度为<span class="hljs-built_in">n</span>的数组，只需要执行这样的排序循环<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>次<br>    for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span> - <span class="hljs-number">1</span> - j; i++)&#123;<br>            <span class="hljs-built_in">int</span> temp = arr[i];<br>            <span class="hljs-built_in">if</span> (arr[i] &gt; arr[i + <span class="hljs-number">1</span>])&#123;<br>                arr[i] = arr[i + <span class="hljs-number">1</span>];<br>                arr[i + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>别忘记交换两个数的固定写法</strong></p><h3 id="2-5-3-二维数组">2.5.3 二维数组</h3><p>初始化的方式</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> a[<span class="hljs-number">5</span>][<span class="hljs-number">6</span>] = &#123;&#123;&#125;&#125;; //默认全部赋值<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>如果数组大小较大（大概$10^{6}$级别），则需要定义在main函数外面</strong></p><h3 id="2-5-4-memset——对数组中每一个元素赋相同的值">2.5.4 memset——对数组中每一个元素赋相同的值</h3><p>格式为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">memset</span><span class="hljs-params">(数组名, 值, sizeof(数组名)</span></span>)；<br></code></pre></td></tr></table></figure><p><strong>只建议使用memset赋值0或者-1，因为memset是对每个字节赋同样的值。如果要赋值其他数字，用fill函数。</strong></p><h3 id="2-5-5-字符数组">2.5.5 字符数组</h3><h4 id="字符数组的初始化">字符数组的初始化</h4><p>除了赋值的时候一个一个赋值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-type">char</span> <span class="hljs-type">str</span>[<span class="hljs-number">3</span>] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;<span class="hljs-char escape_">\0</span>&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><p>也可以通过直接赋值字符串来初始化<strong>仅限于初始化，程序其他位置不允许这样直接赋值整个字符串</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">char str[<span class="hljs-number">15</span>] <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Good Day!&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="字符数组的输入输出">字符数组的输入输出</h4><ol><li>scanf输入 printf输出<br>%s识别空格作为字符串的结尾</li><li>getchar输入，putchar输出</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;   <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>            str[i][j]=<span class="hljs-built_in">getchar</span>();<br>            <span class="hljs-built_in">getchar</span>(); <span class="hljs-comment">//这句是为了把输入中每行末尾的换行符吸收掉</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>            <span class="hljs-built_in">putchar</span>(str[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码就是一个二维数组的示例，输入什么就输出什么。<br>3. gets输入，puts输出<br><strong>在C11之后被弃用</strong><br>现在想要读取一行字符串可以使用while c!=\n或者getline</p><h4 id="字符数组的存放方式">字符数组的存放方式</h4><p>结尾是一个’\0  <strong>只有char型数组要注意，千万要注意长度要比实际存储字符串的长度至少多1</strong></p><h3 id="2-5-6-string-h头文件">2.5.6 string.h头文件</h3><ol><li>strlen()，得到字符数组中第一个\0前字符的个数</li><li>strcmp(), 返回两个字符串大小的比较结果，比较原则是按照字典序</li><li>strcpy()</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">strcpy</span>(字符数组<span class="hljs-number">1</span>， 字符数组<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p><strong>注意：是把字符数组2赋值给字符数组1，这里的复制也包括了\0</strong><br>4. strcat()</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">strcat</span>(字符数组<span class="hljs-number">1</span>， 字符数组<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p><strong>注意：是把字符数组2接到字符数组1后面去</strong></p><h3 id="2-5-7-sscanf与sprintf">2.5.7 sscanf与sprintf</h3><p>sscanf从单词上可以理解为 string+scanf,sprintf则可以理解为 string+printf,均在 stdio.h 头文件下。<br>先来回顾一下scanf与printf，其实可以写成这种形式</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">scanf(<span class="hljs-name">screen</span>, <span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-symbol">&amp;n</span>)<span class="hljs-comment">;</span><br>printf(<span class="hljs-name">screen</span>, <span class="hljs-string">&quot;%d&quot;</span>, n)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>可以发现，scanf的输入其实是把 screen的内容以&quot;%d&quot;的格式传输到n中(即从左至右)<br>而 printf的输出则是把n以&quot;%d&quot;的格式传输到screen上(即从右至左)。<br>sscanf与sprintf与上面的格式是相同的，只不过把 screen 换成了字符数组<br>(假设定义了一个char 数组 str[100])，如下所示:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">sscanf(<span class="hljs-name">str</span>, <span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-symbol">&amp;n</span>)<span class="hljs-comment">;</span><br>sprintf(<span class="hljs-name">str</span>, <span class="hljs-string">&quot;%d&quot;</span>, n)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>上面sscanf写法的作用是把字符数组str中的内容以&quot;%d&quot;的格式写到n中(还是从左至右)<br>而sprintf写法的作用是把n以&quot;%d&quot;的格式写到str 字符数组中(还是从右至左)。示例如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;   <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n=<span class="hljs-number">233</span>;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">sprintf</span>(str,<span class="hljs-string">&quot;%d&quot;</span>, n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">233<br></code></pre></td></tr></table></figure><p>上面只是一些简单的应用，事实上，可以像使用scanf与printf那样进行复杂的格式输入和输出。例如下面的代码使用sscanf将字符数组str中的内容按&quot;%d:%lf,%s&quot;的格式写到int型变量n、double型变量db、char型数组str2中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;   <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">double</span> db;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">1000</span>] = <span class="hljs-string">&quot;2048:3.14,hello&quot;</span>, str2[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">sscanf</span>(str, <span class="hljs-string">&quot;%d:%lf,%s&quot;</span>,&amp;n, &amp;db, str2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n=%d,db=%.2f,str2=%s\n&quot;</span>,n,db,str2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">n</span>=<span class="hljs-number">2048</span>,db=<span class="hljs-number">3</span>.<span class="hljs-number">14</span>,str2=hello<br></code></pre></td></tr></table></figure><p>类似的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;   <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n=<span class="hljs-number">12</span>;<br>    <span class="hljs-type">double</span> db=<span class="hljs-number">3.1415</span>;<br>    <span class="hljs-type">char</span> str[<span class="hljs-number">1000</span>], str2[<span class="hljs-number">100</span>]=<span class="hljs-string">&quot;good&quot;</span>;<br>    <span class="hljs-built_in">sprintf</span>(str, <span class="hljs-string">&quot;%d:%.2f,%s&quot;</span>,n, db, str2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str=%s\n&quot;</span>,str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">str</span>=<span class="hljs-number">12</span>:<span class="hljs-number">3</span>.<span class="hljs-number">14</span>,good<br></code></pre></td></tr></table></figure><h2 id="2-6-函数">2.6 函数</h2><h3 id="2-6-1-函数的定义">2.6.1 函数的定义</h3><ul><li>全局变量：定义在所有函数之前，对于定义之后的所有程序段之内都有效的变量</li><li>局部变量：定义在函数内部且只在函数内部生效，函数结束之后局部变量销毁</li><li>函数定义内的小括号内的参数被称为<strong>形式参数</strong>简称<strong>形参</strong>，而在实际调用时小括号之内的参数称为<strong>实际参数</strong>或者<strong>实参</strong></li></ul><h3 id="2-6-2-再谈main函数">2.6.2 再谈main函数</h3><p>return 0；是告知系统，程序正常终止</p><h3 id="2-6-3-以数组作为函数参数">2.6.3 以数组作为函数参数</h3><p>数组作为参数时，数组中的第一维不需要填写长度（如果是二维数组，那么第二维需要填写长度），实际调用时也只需要填写数组名。<br><strong>数组作为参数时，在函数中对数组元素的修改就等同是对原数组元素的修改（这与普通的局部变量不同）</strong><br>比如</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">void <span class="hljs-built_in">change</span>(int <span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[]</span><span class="hljs-selector-attr">[5]</span>)&#123; <span class="hljs-comment">//第二维要注明长度</span><br><br>&#125; <br></code></pre></td></tr></table></figure><p>数组可以作为参数传入，但是不能作为返回类型。</p><h3 id="2-6-4-函数的嵌套调用">2.6.4 函数的嵌套调用</h3><h3 id="2-6-5-函数的递归调用">2.6.5 函数的递归调用</h3><p>递归是函数自己调用自身的过程，会在第四章详细介绍</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;   <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">F</span>(n<span class="hljs-number">-1</span>)*n;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n=<span class="hljs-number">12</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7-指针">2.7 指针</h2><p><strong>指针是一个unsigned类型的int</strong></p><h3 id="2-7-2-指针变量">2.7.2 指针变量</h3><p>如果要同时定义几个指针变量，星号只会结合于第一个变量名</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span>* p1, p2; <span class="hljs-regexp">//p</span>1是<span class="hljs-keyword">int</span>*类型的 p2是<span class="hljs-keyword">int</span>类型的<br></code></pre></td></tr></table></figure><p>一种给指针变量赋值的方式</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> a;<br><span class="hljs-built_in">int</span> *p = &amp;a;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">int</span> a;<br><span class="hljs-attribute">int</span> *p;<br><span class="hljs-attribute">p</span> = &amp;a;<br></code></pre></td></tr></table></figure><p><strong>地址&amp;a是赋值给p的而不是赋值给*p的</strong></p><h3 id="2-7-3-指针与数组">2.7.3 指针与数组</h3><p><strong>数组名称可以作为数组的首地址使用</strong><br>即定义int arr[], 则有a==&amp;a[0];<br>且有a+i==&amp;a[i], *(a+i)==a[i];<br>**两个int类型的指针相减，等价于求这两个指针之间相差了几个int，比如下面这段代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">int a[5];<br>int *<span class="hljs-attribute">p</span>=a;<br>int *<span class="hljs-attribute">q</span>=a+5;<br>cout&lt;&lt;q-p;<br></code></pre></td></tr></table></figure><p>会输出5</p><h3 id="2-7-4-使用指针变量作为函数参数">2.7.4 使用指针变量作为函数参数</h3><p>这时视为把变量的地址传入函数，如果在函数中对这个地址的元素进行改变，那么原先的数据就确实地会被改变。<br>经典例子，使用指针作为参数交换两个数。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">void _swap(int <span class="hljs-number">*a</span>, int <span class="hljs-number">*b</span>)&#123;<br>    int <span class="hljs-attribute">temp</span>=*a; <br>    <span class="hljs-number">*a</span>=<span class="hljs-number">*b</span>;<br>    <span class="hljs-number">*b</span>=temp;<br>&#125;<br></code></pre></td></tr></table></figure><p>经典错误1</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">void</span> _swap(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)&#123;<br>    <span class="hljs-type">int</span> *<span class="hljs-keyword">temp</span>; <br>    *<span class="hljs-keyword">temp</span>=*a;<br>    *a=*b;<br>&#125;<br></code></pre></td></tr></table></figure><p>错因：指针temp没有初始化，是野指针，很大可能指向系统工作区间，随机地址出错概率特别大。<br>解决方案：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">void _swap(int <span class="hljs-number">*a</span>, int <span class="hljs-number">*b</span>)&#123;<br>    int x;<br>    int *<span class="hljs-attribute">temp</span>=&amp;x; <br>    *<span class="hljs-attribute">temp</span>=*a;<br>    <span class="hljs-number">*a</span>=<span class="hljs-number">*b</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>经典错误2</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">void _swap(int <span class="hljs-number">*a</span>, int <span class="hljs-number">*b</span>)&#123;<br>    int *<span class="hljs-attribute">temp</span>=a;<br>    <span class="hljs-attribute">a</span>=b;<br>    <span class="hljs-attribute">b</span>=temp;<br>&#125;<br></code></pre></td></tr></table></figure><p>错因：回顾前面所说的，函数参数的传送方式是单向一次性的，main函数传给swap函数的“地址”其实只是一个unsigned int，swap对地址本身修改并不能对main函数里面的地址进行修改，<strong>能够使main函数里面的数据发生变化的只能是swap函数中对地址指向的数据进行的修改</strong>。这个函数其实就很类似于为什么不可以写一个这样的函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">void</span> _swap(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-keyword">temp</span>=a; <br>    a=b;<br>    b=<span class="hljs-keyword">temp</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为其实都只是副本罢了。</p><h3 id="2-7-5-引用">2.7.5 引用</h3><h4 id="引用的含义">引用的含义</h4><p>C++中特有的语法，给原变量起一个别名，且对引用变量的操作就是对于原变量的操作   <strong>引用不产生副本</strong><br>方法：在函数的参数类型后面加一个&amp;就可以了<br><strong>注意与取地址运算符的&amp;区分开</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;   <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp;x)</span></span>&#123;<br>    x=<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n=<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">change</span>(n);<br>    cout&lt;&lt;n;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针的引用">指针的引用</h4><p>可以运用引用，改造上面的经典错误2</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali">void _swap(int* &amp;p1, int* &amp;p2)&#123;<br>   <span class="hljs-built_in"> int </span>*temp=p1;<br>    p1=p2;<br>    p2=temp;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里相当于把int*视作一个unsigned int类型，而对这样的两个整型变量进行交换是需要加引用的<br>传入的是指针的别名。<br><em><strong>常量不可以使用引用</strong></em></p><blockquote><p>在C++中，引用（Reference）是一种特殊的变量类型，它为另一个变量提供了一个别名。<br>引用本身并不占用额外的内存空间，它只是指向另一个变量的内存地址。<br>通过引用，你可以直接操作被引用的变量，而不需要通过指针来间接访问。</p><p>引用的声明语法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">类型 &amp;引用名 = 变量名;<br></code></pre></td></tr></table></figure><ul><li><code>类型</code>：被引用变量的类型。</li><li><code>引用名</code>：引用的名称，用于后续操作。</li><li><code>变量名</code>：被引用的变量的名称。</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 定义一个整型变量a</span><br>    <span class="hljs-type">int</span> &amp;ref = a;  <span class="hljs-comment">// 定义一个引用ref，它指向变量a</span><br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; std::endl;  <span class="hljs-comment">// 输出: a = 10</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; std::endl;  <span class="hljs-comment">// 输出: ref = 10</span><br><br>    ref = <span class="hljs-number">20</span>;  <span class="hljs-comment">// 通过引用修改a的值</span><br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; std::endl;  <span class="hljs-comment">// 输出: a = 20</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; std::endl;  <span class="hljs-comment">// 输出: ref = 20</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>关键点：</p><ol><li><p><strong>初始化</strong>：引用必须在声明时进行初始化，并且一旦初始化后，就不能再引用其他变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;ref = a;  <span class="hljs-comment">// 正确</span><br><span class="hljs-type">int</span> &amp;ref2;  <span class="hljs-comment">// 错误，引用必须初始化</span><br></code></pre></td></tr></table></figure></li><li><p><strong>别名</strong>：引用实际上是变量的别名，对引用的操作就是对原变量的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;ref = a;<br>ref = <span class="hljs-number">20</span>;  <span class="hljs-comment">// 等同于 a = 20;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>不能为空</strong>：引用不能为空，它必须始终引用某个有效的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> &amp;ref = <span class="hljs-literal">nullptr</span>;  <span class="hljs-comment">// 错误，引用不能为空</span><br></code></pre></td></tr></table></figure></li><li><p><strong>常量引用</strong>：你可以声明一个常量引用，这样引用就不能修改被引用的变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;ref = a;  <span class="hljs-comment">// 常量引用</span><br>ref = <span class="hljs-number">20</span>;  <span class="hljs-comment">// 错误，常量引用不能修改被引用的变量</span><br></code></pre></td></tr></table></figure></li><li><p><strong>引用作为函数参数</strong>：引用常用于函数参数传递，以避免拷贝大对象，并且可以直接修改传入的参数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">increment</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;value)</span> </span>&#123;<br>    value++;<br>&#125;<br>                  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">increment</span>(a);<br>    std::cout &lt;&lt; a &lt;&lt; std::endl;  <span class="hljs-comment">// 输出: 11</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>总结：</p><p>引用在C++中是一个非常强大的工具，它允许你以更直观的方式操作变量，避免了指针的复杂性。<br>通过引用，你可以直接修改被引用的变量，而不需要通过指针来间接访问。<br>引用在函数参数传递、返回值等方面都有广泛的应用。</p></blockquote><h2 id="2-8-结构体的使用">2.8 结构体的使用</h2><h3 id="2-8-1-结构体的定义">2.8.1 结构体的定义</h3><p>一个例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">char</span> name;<br>    <span class="hljs-type">int</span> count;<br>&#125;spot;<br></code></pre></td></tr></table></figure><p>定义结构体变量的方式</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">typedef struct<br>&#123;<br>    char name<span class="hljs-comment">;</span><br>    int count<span class="hljs-comment">;</span><br>&#125;spot<span class="hljs-comment">;</span><br>spot A<span class="hljs-comment">;</span><br>spot B<span class="hljs-comment">;</span><br>spot str[<span class="hljs-number">100</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">struct spot<br>&#123;<br>    <span class="hljs-built_in">char</span> name;<br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span>;<br>&#125;A, B, <span class="hljs-built_in">str</span>[<span class="hljs-number">100</span>];<br></code></pre></td></tr></table></figure><p><strong>结构体里面不能定义自己本身，但是可以定义自身类型的指针变量</strong><br>一个例子</p><blockquote><p>#include <iostream></p><p>// 定义一个链表节点结构体<br>struct Node {<br>int data;           // 节点数据<br>Node* next;         // 指向下一个节点的指针<br>};</p><p>int main() {<br>// 创建链表节点<br>Node* head = new Node();<br>head-&gt;data = 1;<br>head-&gt;next = nullptr;</p><pre><code class="hljs">Node* second = new Node();second-&gt;data = 2;second-&gt;next = nullptr;Node* third = new Node();third-&gt;data = 3;third-&gt;next = nullptr;// 将节点连接起来head-&gt;next = second;second-&gt;next = third;// 遍历链表并输出数据Node* current = head;while (current != nullptr) &#123;    std::cout &lt;&lt; current-&gt;data &lt;&lt; &quot; &quot;;    current = current-&gt;next;&#125;// 释放链表内存delete head;delete second;delete third;return 0;</code></pre><p>}</p></blockquote><h3 id="2-8-2-访问结构体内的元素">2.8.2 访问结构体内的元素</h3><p>两种方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">StudentInfo</span>&#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    studentInto *next;<br>&#125;stu, *p;<br></code></pre></td></tr></table></figure><p>访问变量写法</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery">stu<span class="hljs-built_in">.id</span><br>stu<span class="hljs-built_in">.name</span><br>stu.<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>而访问指针变量p</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-params">(*p)</span><span class="hljs-string">.id</span> <span class="hljs-string">//</span>先解引用为一个struct变量<br><span class="hljs-params">(*p)</span><span class="hljs-string">.name</span><br><span class="hljs-params">(*p)</span><span class="hljs-string">.next</span> <br></code></pre></td></tr></table></figure><p>另一种写法</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>id<br><span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span><span class="hljs-keyword">name</span><br><span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span>next<br></code></pre></td></tr></table></figure><p>赋值的写法</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">stu.id <span class="hljs-operator">=</span> <span class="hljs-number">10086</span><span class="hljs-comment">;</span><br>int getID <span class="hljs-operator">=</span> stu.id<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="2-8-3-结构体的初始化">2.8.3 结构体的初始化</h3><p>使用<strong>构造函数</strong>，一种用来初始化结构体的函数，有如下几个特征</p><ol><li>直接定义在结构体中</li><li>不需要写返回类型</li><li>函数名与结构体名相同</li><li>默认生成，无形参，无函数体，需要自己写</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">StudentInfo</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">char</span> gender;<br><br>    <span class="hljs-comment">//用以不初始化就定义结构体变量</span><br>    <span class="hljs-built_in">StudentInfo</span>()&#123;&#125;<br>    <span class="hljs-comment">// 构造函数，用于初始化结构体内部变量</span><br>    <span class="hljs-built_in">StudentInfo</span>(<span class="hljs-type">int</span> _id, <span class="hljs-type">char</span> _gender) &#123;<br>        id = _id;<br>        gender = _gender;<br>    &#125;<br>    <span class="hljs-comment">/* 另一种写法，使用成员初始化列表</span><br><span class="hljs-comment">    StudentInfo(int _id, char _gender) : id(_id), gender(_gender) &#123;&#125;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">//只初始化gender</span><br>    <span class="hljs-built_in">StudentInfo</span>(<span class="hljs-type">char</span> _gender)&#123;<br>        gender = _gender;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function">StudentInfo <span class="hljs-title">student</span><span class="hljs-params">(<span class="hljs-number">12345</span>, <span class="hljs-string">&#x27;M&#x27;</span>)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>只要参数个数与类型不完全相同，就可以任意定义多个构造函数，以适应不同的初始化场合。</strong><br><strong>注意：正是因为没有自己重新定义的构造函数什么都没有，才能够不经初始化就定义结构体变量（思考不初始化构造函数时候是怎么定义的？），所以如果自己重新定义了构造函数，就不能不经过初始化就定义结构体变量！</strong></p><h2 id="2-9-补充">2.9 补充</h2><h3 id="2-9-1-cin和cout">2.9.1 cin和cout</h3><ol><li>cin的输入不指定格式，也不需要加取地址运算符&amp;，直接写变量名就可以了<br>同时读入多个变量的方法</li></ol><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">cin&gt;&gt;<span class="hljs-built_in">n</span>&gt;&gt;<span class="hljs-built_in">db</span>&gt;&gt;c&gt;&gt;str;<br></code></pre></td></tr></table></figure><p>如果想要读入一整行，使用getline函数</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">char</span> <span class="hljs-built_in">str</span>[<span class="hljs-number">100</span>];<br>cin.getline(<span class="hljs-built_in">str</span>,<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><blockquote><p><code>getline</code> 是 C++ 标准库中的一个函数，用于从输入流（如 <code>cin</code>）中读取一行文本。<br>与 <code>cin</code> 的 <code>&gt;&gt;</code> 操作符不同，<code>getline</code> 可以读取包含空格的整行文本，直到遇到换行符（<code>\n</code>）为止。</p><h3 id="语法">语法</h3><p><code>getline</code> 函数的基本语法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::<span class="hljs-built_in">getline</span>(std::cin, string_variable);<br></code></pre></td></tr></table></figure><ul><li><code>std::cin</code>：输入流对象，通常是标准输入流。</li><li><code>string_variable</code>：一个 <code>std::string</code> 类型的变量，用于存储读取的文本。</li></ul><h3 id="示例">示例</h3><p>以下是一个简单的示例，展示了如何使用 <code>getline</code> 函数搭配 <code>cin</code> 读取用户输入的一行文本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string name;<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;请输入你的名字：&quot;</span>;<br>    std::<span class="hljs-built_in">getline</span>(std::cin, name);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;你好，&quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;！&quot;</span> &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解释">解释</h3><ol><li><p><strong>包含头文件</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br></code></pre></td></tr></table></figure><p>包含必要的头文件，<code>&lt;iostream&gt;</code> 用于输入输出流操作，<code>&lt;string&gt;</code> 用于使用 <code>std::string</code> 类型。</p></li><li><p><strong>定义字符串变量</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::string name;<br></code></pre></td></tr></table></figure><p>定义一个 <code>std::string</code> 类型的变量 <code>name</code>，用于存储用户输入的文本。</p></li><li><p><strong>提示用户输入</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::cout &lt;&lt; <span class="hljs-string">&quot;请输入你的名字：&quot;</span>;<br></code></pre></td></tr></table></figure><p>使用 <code>std::cout</code> 输出提示信息，要求用户输入名字。</p></li><li><p><strong>读取用户输入</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::<span class="hljs-built_in">getline</span>(std::cin, name);<br></code></pre></td></tr></table></figure><p>使用 <code>std::getline</code> 函数从 <code>std::cin</code> 读取一行文本，并将其存储在 <code>name</code> 变量中。</p></li><li><p><strong>输出结果</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::cout &lt;&lt; <span class="hljs-string">&quot;你好，&quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;！&quot;</span> &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><p>使用 <code>std::cout</code> 输出欢迎信息，其中包含用户输入的名字。</p></li></ol><h3 id="注意事项">注意事项</h3><ul><li><strong>读取整行文本</strong>：<code>getline</code> 函数会读取整行文本，包括空格和制表符，直到遇到换行符（<code>\n</code>）为止。</li><li><strong>处理换行符</strong>：<code>getline</code> 会自动处理换行符，不会将其包含在读取的文本中。</li><li><strong>与 <code>cin &gt;&gt;</code> 的区别</strong>：<code>cin &gt;&gt;</code> 操作符在读取字符串时会忽略空格和换行符，只读取第一个非空白字符到下一个空白字符之间的内容。</li></ul><h3 id="总结">总结</h3><p><code>getline</code> 函数是一个非常有用的工具，特别是在需要读取包含空格的整行文本时。<br>通过搭配 <code>cin</code>，你可以方便地从用户输入中读取一行文本，并进行后续处理。<br>char str[100];<br>cin.getline(str,100);</p></blockquote><ol start="2"><li>cout 控制精度好麻烦，还不如scanf,printf</li></ol><h3 id="2-9-2-浮点数的比较">2.9.2 浮点数的比较</h3><p>引入一个小量eps来对计算机的浮点误差进行修正，再通过一系列的宏定义来实现修正误差的程序<br>一般取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-8</span>;<br></code></pre></td></tr></table></figure><p>核心部分(画几个数轴来理解)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps=<span class="hljs-number">1e-8</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>)<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Equ(a,b) ((fabs((a)-(b)))&lt;(eps))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> More(a,b) (((a)-(b))&gt;(eps))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Less(a,b) (((a)-(b))&lt;(-eps))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MoreEqu(a,b) (((a)-(b))&gt;(-eps))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LessEqu(a,b) (((a)-(b))&lt;(eps))</span><br></code></pre></td></tr></table></figure><p><strong>由于精度问题，可能一个0在经过一系列运算之后变为一个很小的负数了，那么这个时候进行一些运算比如sqrt就会报错，那么这个时候就需要用eps保证变量本身在定义域内</strong><br>比如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-9</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">double</span> x = <span class="hljs-number">-1e-15</span>;<br><br>    <span class="hljs-comment">// 确保 x 在定义域内</span><br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>        x = eps;<br>    &#125;<br><br>    <span class="hljs-comment">// 计算平方根</span><br>    <span class="hljs-type">double</span> result = std::<span class="hljs-built_in">sqrt</span>(x);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;sqrt(&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;) = &quot;</span> &lt;&lt; result &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-9-3-复杂度">2.9.3 复杂度</h3><h4 id="时间复杂度">时间复杂度</h4><p>定义：算法需要执行基本运算的次数所处的等级<br>基本运算：加减乘除之类可以直接执行的运算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    sum+=i;<br>&#125;<br></code></pre></td></tr></table></figure><p>for循环执行了n次，时间复杂度为O(n)，也就是线性增长</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>        sum+=arr[i][j];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基本运算次数为$n^{2}$次，因此时间复杂度为O($n^{2}$)<br>类似无穷小，高等级的幂次会覆盖低等级的幂次<br>评估时间复杂度：一般OJ系统一秒能承受的运算次数大概是$10^{7}$到$10^{8}$，以此作为判断依据<br>####　空间复杂度<br>表示算法需要消耗的最大空间，但是一般都是空间够时间不够，所以可以以时间换空间</p><h4 id="编码复杂度">编码复杂度</h4><p>就是看你觉得代码是不是很复杂了，比较泛泛而又定性的一个概念</p><h2 id="2-10-黑盒测试">2.10 黑盒测试</h2><p>建议直接回去看书，不过这里有一点是值得提一下的<br>scanf()函数其实是有返回值的，返回值也就是传入参数的数量，而当没有参数传入时会返回-1，而且可以用EOF来代表-1</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">while</span>(scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a)!=EOF)&#123;<br>    <span class="hljs-params">...</span><span class="hljs-params">...</span><br>&#125;<br></code></pre></td></tr></table></figure><h1>第4章 入门篇(2)——算法初步</h1><h2 id="4-1-排序">4.1 排序</h2><h3 id="4-1-1-选择排序">4.1.1 选择排序</h3><h3 id="4-1-2-插入排序">4.1.2 插入排序</h3><h3 id="4-1-3-排序题与sort函数的应用">4.1.3 排序题与sort函数的应用</h3><blockquote><p>当然可以！<code>std::sort</code> 中的比较函数用于定义排序的顺序。比较函数需要返回一个布尔值，表示两个元素的相对顺序。具体来说，比较函数应该满足以下条件：</p><ol><li><p><strong>严格弱序（Strict Weak Ordering）</strong>：比较函数必须定义一个严格弱序关系，这意味着它必须满足以下条件：</p><ul><li><strong>反自反性（Irreflexivity）</strong>：对于所有 <code>x</code>，<code>comp(x, x)</code> 必须返回 <code>false</code>。</li><li><strong>反对称性（Antisymmetry）</strong>：如果 <code>comp(x, y)</code> 返回 <code>true</code>，那么 <code>comp(y, x)</code> 必须返回 <code>false</code>。</li><li><strong>传递性（Transitivity）</strong>：如果 <code>comp(x, y)</code> 返回 <code>true</code> 且 <code>comp(y, z)</code> 返回 <code>true</code>，那么 <code>comp(x, z)</code> 必须返回 <code>true</code>。</li></ul></li><li><p><strong>一致性（Consistency）</strong>：如果 <code>comp(x, y)</code> 和 <code>comp(y, x)</code> 都返回 <code>false</code>，那么 <code>x</code> 和 <code>y</code> 被认为是相等的。</p></li></ol><h3 id="示例：比较整数">示例：比较整数</h3><p>假设我们有一个整数数组，我们希望按升序排序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>  <span class="hljs-comment">// 包含 std::sort</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>     <span class="hljs-comment">// 包含 std::vector</span></span><br><br><span class="hljs-comment">// 比较函数：按升序排序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compareAscending</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &lt; b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; numbers = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><br>    std::<span class="hljs-built_in">sort</span>(numbers.<span class="hljs-built_in">begin</span>(), numbers.<span class="hljs-built_in">end</span>(), compareAscending);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> number : numbers) &#123;<br>        std::cout &lt;&lt; number &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h3 id="示例：比较字符串">示例：比较字符串</h3><p>假设我们有一个字符串数组，我们希望按字典序（字母顺序）排序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>  <span class="hljs-comment">// 包含 std::sort</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>     <span class="hljs-comment">// 包含 std::vector</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>     <span class="hljs-comment">// 包含 std::string</span></span><br><br><span class="hljs-comment">// 比较函数：按字典序排序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compareLexicographically</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;a, <span class="hljs-type">const</span> std::string &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &lt; b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;std::string&gt; names = &#123;<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Charlie&quot;</span>, <span class="hljs-string">&quot;David&quot;</span>, <span class="hljs-string">&quot;Eve&quot;</span>&#125;;<br><br>    std::<span class="hljs-built_in">sort</span>(names.<span class="hljs-built_in">begin</span>(), names.<span class="hljs-built_in">end</span>(), compareLexicographically);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;name : names) &#123;<br>        std::cout &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Alice Bob Charlie David Eve</span><br></code></pre></td></tr></table></figure><h3 id="示例：比较结构体">示例：比较结构体</h3><p>假设我们有一个包含学生信息的结构体数组，我们希望按年龄排序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>  <span class="hljs-comment">// 包含 std::sort</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>     <span class="hljs-comment">// 包含 std::vector</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>     <span class="hljs-comment">// 包含 std::string</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;<br>    std::string name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">float</span> gpa;<br>&#125;;<br><br><span class="hljs-comment">// 比较函数：按年龄排序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compareStudentsByAge</span><span class="hljs-params">(<span class="hljs-type">const</span> Student &amp;a, <span class="hljs-type">const</span> Student &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a.age &lt; b.age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;Student&gt; students = &#123;<br>        &#123;<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">3.8</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">3.5</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Charlie&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">3.7</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;David&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">3.9</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Eve&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">3.6</span>&#125;<br>    &#125;;<br><br>    std::<span class="hljs-built_in">sort</span>(students.<span class="hljs-built_in">begin</span>(), students.<span class="hljs-built_in">end</span>(), compareStudentsByAge);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;student : students) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; student.name &lt;&lt; <span class="hljs-string">&quot;, Age: &quot;</span> &lt;&lt; student.age &lt;&lt; <span class="hljs-string">&quot;, GPA: &quot;</span> &lt;&lt; student.gpa &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Name: David, Age: <span class="hljs-number">19</span>, GPA: <span class="hljs-number">3.9</span><br>Name: Alice, Age: <span class="hljs-number">20</span>, GPA: <span class="hljs-number">3.8</span><br>Name: Charlie, Age: <span class="hljs-number">21</span>, GPA: <span class="hljs-number">3.7</span><br>Name: Bob, Age: <span class="hljs-number">22</span>, GPA: <span class="hljs-number">3.5</span><br>Name: Eve, Age: <span class="hljs-number">23</span>, GPA: <span class="hljs-number">3.6</span><br></code></pre></td></tr></table></figure><h3 id="示例：多条件比较">示例：多条件比较</h3><p>假设我们希望在年龄相同的情况下，按 GPA 排序，如果 GPA 也相同，则按名字排序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>  <span class="hljs-comment">// 包含 std::sort</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>     <span class="hljs-comment">// 包含 std::vector</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>     <span class="hljs-comment">// 包含 std::string</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;<br>    std::string name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">float</span> gpa;<br>&#125;;<br><br><span class="hljs-comment">// 比较函数：按年龄、GPA、名字排序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compareStudents</span><span class="hljs-params">(<span class="hljs-type">const</span> Student &amp;a, <span class="hljs-type">const</span> Student &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a.age != b.age) &#123;<br>        <span class="hljs-keyword">return</span> a.age &lt; b.age;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a.gpa != b.gpa) &#123;<br>        <span class="hljs-keyword">return</span> a.gpa &gt; b.gpa;  <span class="hljs-comment">// 按 GPA 降序排序</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> a.name &lt; b.name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;Student&gt; students = &#123;<br>        &#123;<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">3.8</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">3.5</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Charlie&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">3.7</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;David&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-number">3.9</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;Eve&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">3.6</span>&#125;<br>    &#125;;<br><br>    std::<span class="hljs-built_in">sort</span>(students.<span class="hljs-built_in">begin</span>(), students.<span class="hljs-built_in">end</span>(), compareStudents);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> &amp;student : students) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; student.name &lt;&lt; <span class="hljs-string">&quot;, Age: &quot;</span> &lt;&lt; student.age &lt;&lt; <span class="hljs-string">&quot;, GPA: &quot;</span> &lt;&lt; student.gpa &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Name: David, Age: <span class="hljs-number">19</span>, GPA: <span class="hljs-number">3.9</span><br>Name: Alice, Age: <span class="hljs-number">20</span>, GPA: <span class="hljs-number">3.8</span><br>Name: Charlie, Age: <span class="hljs-number">21</span>, GPA: <span class="hljs-number">3.7</span><br>Name: Bob, Age: <span class="hljs-number">22</span>, GPA: <span class="hljs-number">3.5</span><br>Name: Eve, Age: <span class="hljs-number">23</span>, GPA: <span class="hljs-number">3.6</span><br></code></pre></td></tr></table></figure><h3 id="总结-2">总结</h3><p>比较函数是 <code>std::sort</code> 的核心部分，它决定了排序的顺序。比较函数需要返回一个布尔值，表示两个元素的相对顺序。通过编写不同的比较函数，你可以实现各种排序需求。</p></blockquote><h4 id="1-相关结构体的定义">1. 相关结构体的定义</h4><p>排序题一般会给出个体的许多信息，为了方便常常把这些信息统统存在一个结构体中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br><span class="hljs-type">char</span> id[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> score;<br>&#125;stu[<span class="hljs-number">100100</span>];<br></code></pre></td></tr></table></figure><h4 id="2-cmp函数的编写-strcmp函数依据字典序返回两个字符串大小的比较结果">2.cmp函数的编写(strcmp函数依据字典序返回两个字符串大小的比较结果)</h4><p>比如一个排序规则：如果两个学生分数不相同那么分数高的排在前面，否则将姓名字典序小的排在前面<br>就可以写出这样的cmp函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Student a,Student b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.score!=b.score) <span class="hljs-keyword">return</span> a.score&gt;b.score;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(a.name,b.name)&lt;<span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">//注意strcmp的返回值不一定是1或者-1，与IDE有关</span><br></code></pre></td></tr></table></figure><h4 id="3-排名的实现">3.排名的实现</h4><p>规则一般是：分数不同的排名不同，分数相同的排名相同但是占用一个排位</p><p>对这种要求一般需要在结构体类型定义的时候就把排名这一项加入结构体中，于是在数序排序完成之后就有两种方法来实现排名的计算</p><ol><li><p>先将数组第一个个体排名记作1（这个个体数组下标为0），然后遍历剩余的个体：</p><ul><li>如果当前个体的分数等于上一个个体的分数，那么当前个体的排名=上一个个体的排名</li><li>否则，当前个体的排名=数组下标+1</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">stu[<span class="hljs-number">0</span>].r=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">if</span>(stu[i].score==stu.[i<span class="hljs-number">-1</span>].score)&#123;<br>        stu[i].r=stu[i<span class="hljs-number">-1</span>].r;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        stu[i].r=i<span class="hljs-number">+1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>而有些时候也不一定需要记下来排名，直接输出就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> r=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;stu[i].score!=stu[i<span class="hljs-number">-1</span>].score)&#123;<br>        r=i<span class="hljs-number">+1</span>;<br>    &#125;<br>    <span class="hljs-comment">//输出当前个体信息</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-2-散列">4.2 散列</h2><h3 id="4-2-1-散列的定义与整数散列">4.2.1 散列的定义与整数散列</h3><p>散列(hash)是一种常用的算法思想</p><p>比如用hashTable的bool/int数组去判断一个数是否出现过  即:<strong>把输入的数作为数组的下标来对这个数的性质进行统计</strong>,是一个很好的以空间换时间的策略,因为查询的复杂度是O(1)</p><p>下面我们给出hash的定义，可以浓缩成一句话：<strong>将元素通过一个函数转换为整数，使得该整数可以尽量唯一地代表这个元素</strong>，其中这个转换函数被称为<strong>散列函数H</strong></p><p>即：如果元素在转换前为key，那么转换之后就是一个整数H(key),再把转换完的hash值用一个数组去记录</p><p>对于<strong>key为整数</strong>的情况：常用的散列函数有：</p><ul><li><p>直接定址法：H(key)=key 或者 H(key)=a*key+b做一个线性变换</p></li><li><p>平方取中法：取key的平方中间的若干位作为hash值</p></li><li><p>除留余数法：把key除以一个数mod得到的余数作为hash值的方法，即<strong>H(key)=key%mod</strong></p><p>通过这个散列函数可以把很大的数转化为不超过mod的整数，这样就可以把它视为可行的数组下标(需要注意表长&gt;=mod)。显然当mod是一个素数时，H(key)尽可能覆盖[0,mod)范围内的每一个数。因此一般为了方便起见取TSize为一个素数，而mod直接取成与TSize相等</p><p>但是很容易注意到这个方法可能会有两个不同的数key1与key2使得H(key1)==H(key2)，这种情况叫**“冲突”**</p><p>下面有三种方法解决冲突，其中第一种和第二种方法都计算了新的hash值，又称为开放定址法</p><ol><li><p>线性探查法：当得到 key 的 hash 值 H(key),但是表中下标为 H(key)的位置已经被某个其他元素使用了那么就检査下一个位置H(key)+1是否被占，如果没有，就使用这个位置;否则就继续检查下一个位置(也就是将hash值不断加1)。如果检查过程中超过了表长，那么就回到表的首位继续循环，直到找到一个可以使用的位置，或者是发现表中所有位置都已被使用。显然，这个做法容易导致扎堆，即表中连续若于个位置都被使用，这在一定程度上会降低效率。</p></li><li><p>平方探査法：在平方探查法中，为了尽可能避免扎堆现象，当表中下标为H(key)的位置被占时，将按下面的顺序检査表中的位置:H(key)+$1^{2}$、H(key)-$1^{2}$、H(key)+ $2^{2}$、H(key)- $2^{2}$、H(key)+ $3^{2}$…。如果检査过程中 H(key)+$k^{2}$超过了表长 TSize，那么就把 H(key)+$k^{2}$对表长 TSize 取模;</p><p>如果检查过程中出现 H(key)-$k^{2}$&lt;0的情况(假设表的首位为 0),那么将((H(key)-$k^{2}$)% TSize+ TSize)% TSize作为结果(等价于将H(key)-$k^{2}$不断加上 TSize 直到出现第一个非负数)。如果想避免负数的麻烦，可以只进行正向的平方探查。可以证明，如果k在[0,TSize)范围内都无法找到位置，那么当k&gt;TSize时，也一定无法找到位置。</p></li><li><p>链地址法（拉链法）：和上面两种方法不同，链地址法不计算新的 hash 值，而是把所有 H(key)相同的 key 连接成一条单链表(可以在学习完7.3小节后回过头来看)。这样可以设定一个数组Link，范围是Link[0]~ Link[mod]，其中 Link[h]存放 H(key)=h的一条单链表，于是当多个关键字 key 的hash 值都是h时，就可以直接把这些冲突的key直接用单链表连接起来，此时就可以遍历这条单链表来寻找所有H(key)=h的key。<br>当然，一般来说，可以使用标准库模板库中的map(见6.4节)来直接使用hash的功能(C++11 以后可以用unordered map，速度更快)，因此除非必须模拟这些方法或是对算法的效率要求比较高，一般不需要自己实现上面解决冲突的方法。</p></li></ol></li></ul><h3 id="4-2-2-字符串hash初步">4.2.2 字符串hash初步</h3><p>如果key不是整数，该如何设计散列函数？</p><p>一个例子是:如何将一个二维整点P的坐标映射为一个整数，使得整点P可以由该整数唯一地代表。假设一个整点P的坐标是(x,y)，其中 0&lt;x,y&lt;Range，那么可以令 hash 函数为H(P)=x*Range+y，这样对数据范围内的任意两个整点P1与P2,H(P1)都不会等于 H(P2),就可以用 H(P)来唯一地代表该整点P,接着便可以通过整数 hash 的方法来进一步映射到较小的范围。<br>本节的重点在于字符串hash。**字符串hash是指将一个字符串S映射为一个整数，使得该整数可以尽可能唯一地代表字符串S。**本节只讨论将字符串转换为唯一的整数，进阶部分在12.1节。</p><p>为了讨论问题方便，先假设字符串均由大写字母A~Z构成。在这个基础上，不妨把A~Z视为0~25，这样就把 26个大写字母对应到了二十六进制中。接着，按照将二十六进制转换为十进制的思路，由进制转换的结论可知，在进制转换过程中，得到的十进制肯定是唯一的，由此便可实现将字符串映射为整数的需求(注意:转换成的整数最大为是$26^{len}$-1(len为字符串长度)，代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hashFunc</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">int</span> len)</span></span>&#123; <span class="hljs-comment">//hash函数，将字符串S转换为整数</span><br>    <span class="hljs-type">int</span> id=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        id=id*<span class="hljs-number">26</span>+(s[i]-<span class="hljs-string">&#x27;A&#x27;</span>); <span class="hljs-comment">//将26进制转化为10进制</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> id;<br>&#125;<br></code></pre></td></tr></table></figure><p>显然len不能太长了，如果里面还有小写字母可以把26进制变成52进制，也是一样的</p><p>而如果出现了数字，一般有两种处理方法:<br>① 按照小写字母的处理方法，增大进制数至 62。</p><p>②如果保证在字符串的末尾是确定个数的数字,那么就可以把前面英文字母的部分按上面的思路转换成整数，再将末尾的数字直接拼接上去。例如对由三个字符加一位数字组成的字符串“BCD4”来说，就可以先将前面的“BCD”转换为整数731，然后直接拼接上末位的4变为7314即可。下面的代码体现了这个例子:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hashFunc</span><span class="hljs-params">(<span class="hljs-type">char</span> s[],<span class="hljs-type">int</span> len)</span></span>&#123; <span class="hljs-comment">//hash函数，将字符串S转换为整数</span><br>    <span class="hljs-type">int</span> id=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len<span class="hljs-number">-1</span>;i++)&#123;<br>        id=id*<span class="hljs-number">26</span>+(s[i]-<span class="hljs-string">&#x27;A&#x27;</span>); <span class="hljs-comment">//将26进制转化为10进制</span><br>    &#125;<br>    id=id*<span class="hljs-number">10</span>+(s[len]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> id;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-递归">4.3 递归</h2><h3 id="4-3-1-分治">4.3.1 分治</h3><p>分治全称：分而治之，也就是<strong>将原问题划分成若干个规模较小而结构与原问题相同或相似的子问题，然后分别解决这些子问题，最后合并子问题的解，即可得到原问题的解</strong>，也就是说分治法可以分为三步</p><ol><li>分解</li><li>解决</li><li>合并</li></ol><p>需要指出的是分治法分解出的子问题应该是相互独立而没有交叉的，如果存在两个子问题有交叉部分，那么就不应该用分治法求解</p><p>特别地，把子问题个数为1的情况称之为减治</p><p>分治作为一种算法思想，<strong>既可以使用递归的手段去实现，也可以同非递归的手段去实现</strong>，不过视情况而定</p><h3 id="4-3-2-递归">4.3.2 递归</h3><p>递归，在于反复调用自身函数，但是每次把问题范围缩小，直到范围缩小到可以直接得到边界数据的结果，然后再在返回的路上求出对应的解，这样看来<strong>递归很适合实现分治思想</strong></p><p>递归的逻辑中一般有两个重要概念</p><ol><li>递归边界</li><li>递归式（或称递归调用）</li></ol><p>给出一个例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//计算n的阶乘</span><br><span class="hljs-comment">//考虑n!的计算式，不难得出递归式F(n)=nF(n-1)</span><br><span class="hljs-comment">//所以可以把F(n)变成F(n-1),然后一直递归下去...</span><br><span class="hljs-comment">//什么时候是尽头呢?考虑0!=1,不妨以F(0)=1作为递归边界</span><br><span class="hljs-comment">//即:规模减小到n=0的时候开始&quot;回头&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//到达递归边界时返回</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> n*<span class="hljs-built_in">F</span>(n<span class="hljs-number">-1</span>); <span class="hljs-comment">//没有到达边界时使用递归式递归下去</span><br>&#125;<br></code></pre></td></tr></table></figure><p>![](C:\Users\endle\Pictures\Camera Roll\屏幕截图 2024-12-01 175332.png)</p><p>再给出一个例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//计算Fibonacci数列的第n项</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>||n==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//到达递归边界时返回</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">F</span>(n<span class="hljs-number">-1</span>)+<span class="hljs-built_in">F</span>(n<span class="hljs-number">-2</span>); <span class="hljs-comment">//没有到达边界时使用递归式递归下去</span><br>&#125;<br><span class="hljs-comment">//其实这就是分治法的一种应用，</span><br><span class="hljs-comment">//对于给定的n把求解F(n)的问题分解成求F(n-1)和F(n-2)这两个子问题,</span><br><span class="hljs-comment">//而F(0)==F(1)==1是n很小的时候问题的直接解决</span><br></code></pre></td></tr></table></figure><p>由上面两个例子可以知道，实现一个递归函数需要两样东西：<strong>递归边界与递归式</strong>，其中递归边界用来返回最简单底层的结果，递归式用来减少数据规模并向下一层递归。</p><p>再给出一个例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">////按照字典序输出全排列</span><br><span class="hljs-comment">//可以分成若干个子问题：输出1开头的全排列，输出2开头的全排列</span><br><span class="hljs-comment">//...输出以n开头的全排列</span><br><span class="hljs-comment">//于是不妨设定一个数组P用以存放当前的排列</span><br><span class="hljs-comment">//再设定一个hashTable，其中hashTable[x]==true表示x在数组P中</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">11</span>;<br><span class="hljs-comment">//P为当前排列，hashTable记录整数x是否已在P中</span><br><span class="hljs-type">int</span> n,P[maxn],hashTable[maxn]=&#123;<span class="hljs-literal">false</span>&#125;;<br><span class="hljs-comment">//当前处理排列的第index号位</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">generateP</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(index==n<span class="hljs-number">+1</span>)&#123;<span class="hljs-comment">//递归边界，已经处理完排列的1~n位</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            cout&lt;&lt;P[i]; <span class="hljs-comment">//输出当前排列</span><br>        &#125;<br>        cout&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;x&lt;=n;x++)&#123;<span class="hljs-comment">//枚举1~n，试图将x填入P[index]中</span><br>        <span class="hljs-keyword">if</span>(hashTable[x]==<span class="hljs-literal">false</span>)&#123;<br>            P[index]=x; <span class="hljs-comment">//令P的第index位为x，即把x加入当前排列</span><br>            hashTable[x]=<span class="hljs-literal">true</span>; <span class="hljs-comment">//记x已在P中</span><br>            <span class="hljs-built_in">generateP</span>(index<span class="hljs-number">+1</span>); <span class="hljs-comment">//处理排列的第index+1号</span><br>            hashTable[x]=<span class="hljs-literal">false</span>; <span class="hljs-comment">//已处理完P[index]为x的子问题，还原状态</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后来看n皇后问题</p><p>指的是在一个n*n的棋盘上放置n个皇后使得这n个皇后两两均不在同一行、同一列、同一对角线上，求合法的方案数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">11</span>;<br><span class="hljs-comment">//每行只能放置一个皇后，每列也只能放置一个</span><br><span class="hljs-comment">//把n列皇后所在的行号依次写出，就会是1~n的一个排列</span><br><span class="hljs-comment">//只需要筛选这每个排列中合法的即可</span><br><span class="hljs-comment">//考虑：递归边界、递归式</span><br><span class="hljs-comment">//由于到达递归边界时表示生成了一个排列，</span><br><span class="hljs-comment">//所以需要在其内部判断是否为合法方案</span><br><span class="hljs-comment">//如何判断？在一个排列中两两遍历两个皇后，</span><br><span class="hljs-comment">//判断他们是否在一条对角线上</span><br><span class="hljs-comment">//如果不是就count++</span><br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n,P[maxn],hashTable[maxn]=&#123;<span class="hljs-literal">false</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(index==n<span class="hljs-number">+1</span>)&#123;<span class="hljs-comment">//递归边界，表示生成了一个排列（类似上一题）</span><br>        <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;=n;j++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(i-j)==<span class="hljs-built_in">abs</span>(P[i]-P[j]))&#123;<span class="hljs-comment">//如果在一条对角线上，斜率为±1</span><br>                    flag=<span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag) count++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;x&lt;=n;x++)&#123;<span class="hljs-comment">//就是上一题全排列，因为不能在同一行同一列和全排列的数学本质相同</span><br>        <span class="hljs-keyword">if</span>(!hashTable[x])&#123;<span class="hljs-comment">//这一行还没被占用</span><br>            P[index]=x;<br>            hashTable[x]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">A</span>(index<span class="hljs-number">+1</span>);<br>            hashTable[x]=<span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这种解法事实上太暴力了，因为已经生成一部分排列的时候就可以判断这个排列符不符合要求了，如果不符合也就没必要递归了，直接返回上一层，这种做法一般称之为<strong>回溯法</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">11</span>;<br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n,P[maxn],hashTable[maxn]=&#123;<span class="hljs-literal">false</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(index==n<span class="hljs-number">+1</span>)&#123;<br>        count++; <span class="hljs-comment">//能到这里的一定符合要求</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;x&lt;=n;x++)&#123;<span class="hljs-comment">//第x行</span><br>        <span class="hljs-keyword">if</span>(!hashTable[x])&#123;<span class="hljs-comment">//第x行还没有皇后</span><br>            <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> pre=<span class="hljs-number">1</span>;pre&lt;index;pre++)&#123;<span class="hljs-comment">//遍历之前的皇后</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(index=pre)==<span class="hljs-built_in">abs</span>(P[index]-P[pre]))&#123;<br>                    flag=<span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)&#123;<br>            P[index]=x;<br>            hashTable[x]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">A</span>(index<span class="hljs-number">+1</span>);<br>            hashTable[x]=<span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-贪心">4.4 贪心</h2><h3 id="4-4-1-简单贪心">4.4.1 简单贪心</h3><p>贪心是求解一类最优化问题的方法，它总是考虑在当前状态下**局部最优（或较优）**的策略，来使全局的结果达到最优（或较优）。平常来说，证明贪心法的思路是反证法，即假设策略不能导致最优解，然后通过一系列推导来得到矛盾</p><h1>第5章 入门篇(3)——数学问题</h1><h2 id="5-6-大整数运算（高精度）">5.6 大整数运算（高精度）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//大整数的存储：使用数组</span><br><span class="hljs-comment">//整数的高位存储在数组的高位，整数的低位存储在数组的低位</span><br><span class="hljs-comment">//将整数按字符串%s读入的时候实际上是逆位存储的，因此在读入之后需要在另存至d[]数组的时候反转一下</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">bign</span>&#123;<br>    <span class="hljs-type">int</span> d[<span class="hljs-number">1000</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-built_in">bign</span>()&#123; <span class="hljs-comment">//构造函数</span><br>        <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(d));<br>        len=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//这样在每次定义结构体变量的时候都会自动对此变量进行初始化</span><br><span class="hljs-comment">//而在读入大整数时一般都是先用字符串读入然后再把字符串另存到bign结构体 由于使用char数组进行读入时，与我们想要的顺序是相反的，因此为了让整数在bign中是顺位存储，需要让字符串倒着赋给d[]数组</span><br><span class="hljs-function">bign <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span></span>&#123; <span class="hljs-comment">//将整数转换为bign</span><br>    bign a;<br>    a.len=<span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.len;i++)&#123;<br>        a.d[i]=str[a.len-i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-comment">//比较两个bign变量的大小：先比len再从高位到低位比较</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(bign a,bign b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.len&gt;b.len) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//a大</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.len&lt;b.len) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">//b大</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(a.d[i]&gt;b.d[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.d[i]&lt;b.d[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//两数相等</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//高精度加法 必须都得是正数</span><br><span class="hljs-function">bign <span class="hljs-title">add</span><span class="hljs-params">(bign a,bign b)</span></span>&#123;<br>    bign c;<br>    <span class="hljs-type">int</span> carry=<span class="hljs-number">0</span>; <span class="hljs-comment">//carry是进位</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.len||i&lt;b.len;i++)&#123; <span class="hljs-comment">//以较长的为界限（想象竖式加法）</span><br>        <span class="hljs-type">int</span> temp=a.d[i]+b.d[i]+carry; <span class="hljs-comment">//两个对应位与进位相加</span><br>        c.d[c.len++]=temp%<span class="hljs-number">10</span>; <span class="hljs-comment">//个位数为该位的结果</span><br>        carry=temp/<span class="hljs-number">10</span>; <span class="hljs-comment">//十位数为新的进位</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(carry!=<span class="hljs-number">0</span>) &#123;<br>        c.d[c.len++]=carry; <span class="hljs-comment">//如果最后进位不为0，那么直接赋给结果的最高位</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-comment">//高精度减法</span><br><span class="hljs-function">bign <span class="hljs-title">sub</span><span class="hljs-params">(bign a,bign b)</span></span>&#123;<br>    bign c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.len||i&lt;b.len;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a.d[i]&lt;b.d[i])&#123; <span class="hljs-comment">//如果不够减</span><br>            a.d[i<span class="hljs-number">+1</span>]--;<br>            a.d[i]+=<span class="hljs-number">10</span>;<br>        &#125;<br>        c.d[c.len++]=a.d[i]-b.d[i]; <span class="hljs-comment">//减法结果为当前位数结果</span><br>    &#125;<br>    <span class="hljs-keyword">while</span>(c.len<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">1</span>&amp;&amp;c.d[c.len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//最后一步需要注意减法后高位可能有多余的0，要忽视他们，但是也要保证结果（去掉可能存在的高位0之后）至少有1位数</span><br>        c.len--; <span class="hljs-comment">//忽视高位0</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-comment">//最后需要指出使用sub函数之前需要比较两个数的大小，如果被减数小于减数，则需要交换两个变量，然后输出负号，再使用sub函数</span><br><br><span class="hljs-comment">//高精度与低精度的乘法</span><br><span class="hljs-function">bign <span class="hljs-title">multi</span><span class="hljs-params">(bign a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    bign c;<br>    <span class="hljs-type">int</span> carry=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.len;i++)&#123;<br>        <span class="hljs-type">int</span> temp=a.d[i]*b+carry;<br>        c.d[c.len++]=temp%<span class="hljs-number">10</span>;<br>        carry=temp/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(carry!=<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//因为乘法的进位可能不止一位所以用while</span><br>        c.d[c.len++]=carry%<span class="hljs-number">10</span>;<br>        carry/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-comment">//高精度与低精度的除法</span><br><span class="hljs-function">bign <span class="hljs-title">divide</span><span class="hljs-params">(bign a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span>&amp; r)</span></span>&#123; <span class="hljs-comment">//r 为余数</span><br>    bign c;<br>    c.len=a.len; <span class="hljs-comment">//被除数的每一位和商的每一位是一一对应的，因此可以先令长度相等 </span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i++)&#123; <span class="hljs-comment">//除法从高位开始</span><br>        r=r*<span class="hljs-number">10</span>+a.d[i];<br>        <span class="hljs-keyword">if</span>(r&lt;b) c.d[i]=<span class="hljs-number">0</span>; <span class="hljs-comment">//不够除则这位为0</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            c.d[i]=r/b;<br>            r=r%b;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(c.len<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">1</span>&amp;&amp;c.d[c.len<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>)&#123;<br>        c.len--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></td></tr></table></figure><h1>第6章 C++标准模板库(STL)介绍</h1><h2 id="6-1-vector的常见用法详解">6.1 vector的常见用法详解</h2><h3 id="定义方式举例">定义方式举例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; name;<br>vector&lt;<span class="hljs-type">char</span>&gt; name;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; name; <span class="hljs-comment">//两个&gt;&gt;之间加上空格以防止被识别成移位操作</span><br><span class="hljs-comment">//这个可以理解成两个维度都可以变成的二维数组</span><br></code></pre></td></tr></table></figure><p>定义vector数组的方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; arr[<span class="hljs-number">100</span>]; <span class="hljs-comment">//这种定义方式就是一维的长度被固定成100了</span><br></code></pre></td></tr></table></figure><h3 id="vector容器内元素的访问">vector容器内元素的访问</h3><h4 id="通过下标访问">通过下标访问</h4><p>就类似普通的数组</p><h4 id="通过迭代器访问">通过迭代器访问</h4><p>迭代器(iterator)可以理解成一种类似指针的东西</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-keyword">typename</span>&gt;::iterator it; <span class="hljs-comment">//it是一个vector&lt;typename&gt;::iterator型的变量</span><br></code></pre></td></tr></table></figure><p>这样就得到了迭代器it，并且可以通过*it来访问vector中的元素，举例如下</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">vector&lt;int&gt; vi<span class="hljs-comment">;</span><br>for(inti<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;i&lt;=5;i++)&#123;</span><br>    vi.push_back(i)<span class="hljs-comment">; //push_back(i)在vi的末尾添加元素i，即依次添加1 2 3 4 5</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用类似下标和指针访问数组的方式来访问容器中的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; vi;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>        vi.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-comment">//vi.begin()为取vi的首元素地址，而it指向这个地址</span><br>    vector&lt;<span class="hljs-type">int</span>&gt;::iterator it=vi.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(it+i));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看出vi[i]==*(vi.begin()+i)<br>再提一下end()函数：取尾元素地址的下一个地址，end()作为迭代器末尾标志不存储任何元素。（美国人思维习惯左闭右开）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; vi;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>        vi.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-comment">//vector的迭代器不支持it&lt;vi.end()的元素，循环条件只能用it!=vi.end()</span><br>    <span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-type">int</span>&gt;::iterator it=vi.<span class="hljs-built_in">begin</span>();it!=vi.<span class="hljs-built_in">end</span>();it++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*it);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>强调一下，STL容器中只有在vector和string中才允许vi.begin()+3这种迭代器带上整数的写法</strong></p><h3 id="vector常用函数实例解析">vector常用函数实例解析</h3><h4 id="push-back">push_back()</h4><p>在vector后面增加一个元素(x),时间复杂度O(1),实例见上文</p><h4 id="pop-back">pop_back()</h4><p>直接使用不需要传参,用以删除vector的尾元素,时间复杂度O(1)</p><h4 id="size">size()</h4><p>用以获取vector中元素的个数,返回值unsigned不过一般用%d就可以了，时间复杂度O(1)</p><h4 id="clear">clear()</h4><p>清空vector中的所有元素，时间复杂度O(N),N为vector中元素个数</p><h4 id="insert">insert()</h4><p>insert(it,x)用以向vector的任意迭代器it处插入一个元素x，时间复杂度O(N)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; vi;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>        vi.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    vi.<span class="hljs-built_in">insert</span>(vi.<span class="hljs-built_in">begin</span>()<span class="hljs-number">+2</span>,<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;vi.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,vi[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>是的，对于 <code>std::vector&lt;int&gt; vi</code> 而言，<code>vi + i == vi[i]</code> 并不成立。</p><h3 id="原因分析"><strong>原因分析</strong></h3><ol><li><p><strong><code>vi[i]</code> 的含义：</strong></p><ul><li><code>vi[i]</code> 是 <code>std::vector</code> 提供的操作符重载，用于访问向量中索引为 <code>i</code> 的元素。其底层实现相当于：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">*(vi.<span class="hljs-built_in">begin</span>() + i)<br></code></pre></td></tr></table></figure>其中 <code>vi.begin()</code> 是一个指向 <code>vi</code> 开头元素的迭代器，而迭代器支持偏移。</li></ul></li><li><p><strong><code>vi + i</code> 的含义：</strong></p><ul><li><code>vi</code> 是 <code>std::vector</code> 类型的对象，不是指针或迭代器。C++ 中不允许直接对对象使用加法运算，因此 <code>vi + i</code> 是非法的，会导致编译错误。</li></ul></li></ol><hr><h3 id="正确用法"><strong>正确用法</strong></h3><p>如果想通过指针或迭代器实现类似 <code>vi[i]</code> 的效果，应该使用 <code>vi.begin()</code> 或指针加偏移量。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; vi = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;;<br>    <br>    <span class="hljs-comment">// 使用下标访问</span><br>    cout &lt;&lt; vi[<span class="hljs-number">2</span>] &lt;&lt; endl;  <span class="hljs-comment">// 输出：30</span><br><br>    <span class="hljs-comment">// 使用迭代器</span><br>    <span class="hljs-keyword">auto</span> it = vi.<span class="hljs-built_in">begin</span>();<br>    cout &lt;&lt; *(it + <span class="hljs-number">2</span>) &lt;&lt; endl;  <span class="hljs-comment">// 输出：30</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="对比：普通数组中的-arr-i-arr-i"><strong>对比：普通数组中的 <code>arr + i == arr[i]</code></strong></h3><p>对于普通数组（如 <code>int arr[5]</code>），<code>arr</code> 是指向数组首元素的指针，因此 <code>arr + i</code> 是合法的，指向数组第 <code>i</code> 个元素的地址。而 <code>arr[i]</code> 其实是通过指针偏移访问到值的语法糖，其本质是 <code>*(arr + i)</code>。</p><hr><h3 id="结论"><strong>结论</strong></h3><p>在 <code>std::vector</code> 中：</p><ul><li><code>vi[i]</code> 是通过索引访问元素的合法操作。</li><li><code>vi + i</code> 是非法的，因为 <code>vi</code> 是一个对象而不是指针。<br>如果需要实现类似 <code>vi[i]</code> 的操作，应使用迭代器或下标索引。</li></ul></blockquote><h4 id="erase">erase()</h4><p>有两种用法：删除单个元素，删除一个区间内的所有元素，时间复杂度均为O(N)</p><ol><li>删除单个元素<br>erase(it)即删除迭代器处的元素</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; vi;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>        vi.<span class="hljs-built_in">push_back</span>(i); <span class="hljs-comment">//1 2 3 4 5</span><br>    &#125;<br>    vi.<span class="hljs-built_in">erase</span>(vi.<span class="hljs-built_in">begin</span>()<span class="hljs-number">+1</span>); <span class="hljs-comment">//删除2 不是vi.begin()+1因为*(vi.begin())==vi[0]</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;vi.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,vi[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>删除一个区间之内的所有元素<br>erase(first,last)即删除[first,last)内的所有元素<br>由此可见vi.clear()等价于vi.erase(vi.begin(),vi.end())</li></ol><h2 id="6-2-set的常见用法详解">6.2 set的常见用法详解</h2><p>set，也就是集合，是一个<strong>内部自动有序</strong>而且<strong>不含重复元素</strong>的容器</p><h3 id="set的定义">set的定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">set&lt;<span class="hljs-keyword">typename</span>&gt; name;<br></code></pre></td></tr></table></figure><p>类似vector,或者说绝大部分STL的定义方式都是这样的</p><h3 id="set容器内元素的访问">set容器内元素的访问</h3><p>set只能通过迭代器访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">set&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br></code></pre></td></tr></table></figure><p><strong>除vector和string以外的STL容器都不支持*(it+i)的访问方式</strong>所以只能这样枚举</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    set&lt;<span class="hljs-type">int</span>&gt; st;<br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>);<br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//不支持it&lt;st.end()</span><br>    <span class="hljs-keyword">for</span>(set&lt;<span class="hljs-type">int</span>&gt;::iterator it=st.<span class="hljs-built_in">begin</span>();it!=st.<span class="hljs-built_in">end</span>();it++)&#123;<br>        cout&lt;&lt;*it;<br>    &#125; <span class="hljs-comment">//要理解迭代器，不是针对一个对象，而是这个类中的一种数据类型</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>由此可见set内的元素<strong>自动升序排序</strong>而且自动<strong>去除重复元素</strong></p><h3 id="set常用函数实例解析">set常用函数实例解析</h3><h4 id="insert-2">insert()</h4><p>会有自动递增排序和去重，时间复杂度O(logN)</p><h4 id="find">find()</h4><p>find(value)返回set中对应值为value的迭代器，时间复杂度O(logN)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    set&lt;<span class="hljs-type">int</span>&gt; st;<br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>);<br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>);<br>    st.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>    set&lt;<span class="hljs-type">int</span>&gt;::iterator it=st.<span class="hljs-built_in">find</span>(<span class="hljs-number">2</span>);<br>    cout&lt;&lt;*it&lt;&lt;endl; <span class="hljs-comment">//输出2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="erase-2">erase()</h4><ol><li><ul><li>st.erase(it) 删除单个元素(对应迭代器处的)，可以结合find函数来使用 时间复杂度为O(1)</li><li>st.erase(value) 删除单个元素(值为value的) 时间复杂度为O(logN)</li><li>为什么可以这样？因为value的类型是typename，而it的类型是set<typename>::iterator</li></ul></li><li>删除一个区间之内的所有元素 st.erase(first,last)，其中first和last都是迭代器，时间复杂度为O(last-first)</li></ol><h4 id="size-2">size()</h4><p>略了，O(1)</p><h4 id="clear-2">clear()</h4><p>O(N)</p><h2 id="6-3-string的常见用法详解">6.3 string的常见用法详解</h2><h3 id="string的定义">string的定义</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">string str<span class="hljs-comment">;</span><br>string str1<span class="hljs-operator">=</span><span class="hljs-string">&quot;abcd&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="string中内容的访问">string中内容的访问</h3><h4 id="通过下标访问-2">通过下标访问</h4><p>就像访问字符数组那样去访问string</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string str=<span class="hljs-string">&quot;abcd&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;str.<span class="hljs-built_in">length</span>();i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, str[i]); <span class="hljs-comment">//输出abcd</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要读入和输出整个字符串那就<strong>只能用cin和cout</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string str;<br>    cin&gt;&gt;str;<br>    cout&lt;&lt;str;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不过真的要使用printf也可以使用c_str()强转</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string str=<span class="hljs-string">&quot;abcd&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="通过迭代器访问-2">通过迭代器访问</h4><p>主要是有些函数比如insert()和erase()要求迭代器为参数<br>由于定义string的时候并没有&lt;typename&gt;这一项，因此可以直接这样定义</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">string</span>::iterator <span class="hljs-keyword">it</span>;<br></code></pre></td></tr></table></figure><p>那么就可以使用迭代器来对string进行遍历了</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">#include &lt;bits/stdc++.h&gt;</span><br>using namespace std;<br>int main()&#123;<br>    <span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;abcd&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">string</span>::iterator <span class="hljs-keyword">it</span>=str.begin();<span class="hljs-keyword">it</span>!=<span class="hljs-keyword">end</span>();<span class="hljs-keyword">it</span>++)&#123;<br>        cout&lt;&lt;*<span class="hljs-keyword">it</span>;<br>    &#125;<br><span class="hljs-built_in">    return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里循环条件也可以写成it&lt;str.end()，<strong>因为只有vector和string支持这样的对迭代器比如str.begin()+3直接加减某个数字的操作</strong></p><h3 id="string常用函数实例解析">string常用函数实例解析</h3><h4 id="operator">operator+=</h4><p>可以把两个string直接拼接起来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string str1=<span class="hljs-string">&quot;abc&quot;</span>,str2=<span class="hljs-string">&quot;xyz&quot;</span>,str3;<br>    str3=str1+str2;<br>    cout&lt;&lt;str3; <span class="hljs-comment">//abcxyz</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="compare-operator">compare operator</h4><p>两个string类型直接用比较运算符比较大小，依据是字典序</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(str1&gt;str2)</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="length-或-size">length() 或 size()</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">str.length()<span class="hljs-comment">;</span><br>str.size()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>均返回string的长度且基本相同，时间复杂度O(1)</p><h4 id="insert-3">insert()</h4><p>string的insert()函数有多种写法，时间复杂度均为O(N)</p><ol><li>insert(pos,string),在pos号位置插入字符串string<br><strong>这个pos号位可以是0</strong></li></ol><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf">string str1=<span class="hljs-string">&quot;abc&quot;</span>,str2=<span class="hljs-string">&quot;opq&quot;</span>;<br>str1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>,str2); <span class="hljs-comment">//往str[3]处插入opq，这里也可以直接写&quot;opq&quot;</span><br>cout&lt;&lt;str1&lt;&lt;<span class="hljs-literal">endl</span>; <span class="hljs-comment">//abcopq</span><br></code></pre></td></tr></table></figure><ol start="2"><li>insert(it,it2,it3), it为原字符串的欲插入位置，it2和it3为待插入字符串的首尾迭代器，用以表示[it2,it3)将被插入it的位置上</li></ol><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-built_in">string</span> str1=<span class="hljs-string">&quot;abc&quot;</span>,str2=<span class="hljs-string">&quot;opq&quot;</span>;<br>str.insert(str.<span class="hljs-keyword">begin</span>(),str2.<span class="hljs-keyword">begin</span>,str2.<span class="hljs-keyword">end</span>());<br>cout&lt;&lt;str1&lt;&lt;endl; <span class="hljs-comment">//abcopq</span><br></code></pre></td></tr></table></figure><h4 id="erase-3">erase()</h4><p>时间复杂度均为O(N)</p><ol><li>删除单个元素</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">str.erase(it)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol><li>删除一个区间内的所有元素 两种方法<ul><li>str.erase(first,last) <strong>均为迭代器</strong></li><li>str.erase(pos,length) pos为起始位置(<strong>不是迭代器</strong>),length为删除的字符个数</li></ul> <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">string <span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;abcdefg&quot;</span>;<br><span class="hljs-built_in">str</span>.erase(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">//删除c和d，从第三位开始的两个(包括第三位)</span><br></code></pre></td></tr></table></figure><strong>这个pos号位可以是0</strong></li></ol><h4 id="clear-3">clear()</h4><p>O(1)</p><h4 id="substr">substr()</h4><p>substr(pos,len)返回从pos号位开始、长度为len的子串，时间复杂度为O(len)，示例如下、</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string str=<span class="hljs-string">&quot;Thank you for your smile.&quot;</span>;<br>    cout&lt;&lt;str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)&lt;&lt;endl; <span class="hljs-comment">//Thank</span><br>    cout&lt;&lt;str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">14</span>,<span class="hljs-number">4</span>)&lt;&lt;endl; <span class="hljs-comment">//Your</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这个pos号位可以是0</strong></p><h4 id="string-npos">string::npos</h4><p>string::npos是一个常数其本身的值为-1，但是由于其本身是unsigned_int类型，也可以认为是unsigned_int类型的最大值。string::npos作为find函数失配时候的返回值，可以认为string::npos=-1或4294967295</p><h4 id="find-2">find()</h4><ul><li>str.find(str2),当str2是str的子串的时候，返回其在str中第一次出现的位置（不是迭代器）；如果str2不是str的子串，返回string::npos</li><li>str.find(str2,pos)从pos位开始匹配str2，返回值与上面的相同<br>时间复杂度O(mn)，m和n分别是两个数组的长度</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-built_in">int</span> main&#123;<br>string <span class="hljs-built_in">str</span> =<span class="hljs-string">&quot;Thank you for your smile.&quot;</span><br>string str2 <span class="hljs-string">&quot;you&quot;</span>;<br>string str3 <span class="hljs-string">&quot;me&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>.find (str2) string!=npos)<br>cout &lt;&lt; <span class="hljs-built_in">str</span>.fånd (str2) &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>.find(str2, <span class="hljs-number">7</span>) String:!=npos) (<br>cout <span class="hljs-built_in">str</span>.find (str2, <span class="hljs-number">7</span>) endl;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">str</span>. find (str3) String:!=npos)<br>cout &lt;&lt; Str. find(str3) endl;<br>) <span class="hljs-keyword">else</span> &#123;<br>cout <span class="hljs-string">&quot;I know there is no position for me.&quot;</span> &lt;&lt; endl;&#125;<br><span class="hljs-keyword">return</span> O;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">6</span><br><span class="hljs-number">14</span><br>I know there <span class="hljs-keyword">is</span> <span class="hljs-keyword">no</span> position <span class="hljs-keyword">for</span> <span class="hljs-keyword">me</span>.<br></code></pre></td></tr></table></figure><h4 id="replace">replace()</h4><ul><li>str.replace(pos,len,str2)将str从pos号位开始、长度为len的子串替换为str2</li><li>str.replace(it1,it2,str2)把str的迭代器[it1,it2)范围内的子串替换为st2</li><li>时间复杂度为O(str.length())</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-meta">#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-built_in">int</span> main()&#123;<br>    string <span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;Maybe you will turn around&quot;</span>;<br>    string str2=<span class="hljs-string">&quot;will not&quot;</span>;<br>    string str3=<span class="hljs-string">&quot;surely&quot;</span>;<br>    cout&lt;&lt;<span class="hljs-built_in">str</span>.replace(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,str2)&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-built_in">str</span>.replace(<span class="hljs-built_in">str</span>.begin(),<span class="hljs-built_in">str</span>.begin()+<span class="hljs-number">5</span>,str3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Maybe you will <span class="hljs-keyword">not</span> turn <span class="hljs-keyword">around</span><br>surely you will <span class="hljs-keyword">not</span> turn <span class="hljs-keyword">around</span><br></code></pre></td></tr></table></figure><h3 id="PAT-A1060-ARE-THEY-EQUAL">PAT A1060 ARE THEY EQUAL</h3><h2 id="6-4-map的常用用法详解">6.4 map的常用用法详解</h2><p>map翻译为映射(<strong>其实这里只能是一个单射</strong>),比如数组 typename arr[]就是int类型向其他类型的一个映射，但是map可以将任何基本类型（包括STL容器）映射到任何基本类型（包括STL容器）,比如string到int的映射</p><h3 id="map的定义">map的定义</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;typename1,typename2&gt; mp;<br></code></pre></td></tr></table></figure><p>前一个是映射前类型(键key)，后一个是映射后类型(value)<br>如果是字符串到整型的映射，<strong>必须使用string而不能使用char数组</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;string,<span class="hljs-type">int</span>&gt; mp;<br></code></pre></td></tr></table></figure><p>这是因为char作为数组是不能作为键值的，所以只能使用string<br>也有这样的map</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;set&lt;<span class="hljs-type">int</span>&gt;,string&gt; mp;<br></code></pre></td></tr></table></figure><h3 id="map容器内元素的访问">map容器内元素的访问</h3><p>map有两种访问方式</p><h4 id="通过下标访问-3">通过下标访问</h4><p>和访问普通的数组的方式一样，比如对于一个定义为</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; mp;<br></code></pre></td></tr></table></figure><p>的map来说，就可以使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mp<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;c&#x27;</span>]</span><br></code></pre></td></tr></table></figure><p>的方式来访问它的对应的int<br>但是需要注意，和函数一样，map中的键是唯一的，比如</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; mp;<br>mp[<span class="hljs-string">&#x27;c&#x27;</span>]=<span class="hljs-number">20</span>;<br>mp[<span class="hljs-string">&#x27;c&#x27;</span>]=<span class="hljs-number">30</span>; <span class="hljs-comment">//20被覆盖</span><br>cout&lt;&lt;mp[<span class="hljs-string">&#x27;c&#x27;</span>]; <span class="hljs-comment">//输出30</span><br></code></pre></td></tr></table></figure><h4 id="通过迭代器访问-3">通过迭代器访问</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;typename1,typename2&gt;::iterator it;<br></code></pre></td></tr></table></figure><p>由于map的每一对映射都有两个typename，因此一个it必须可以同时访问键和值</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">it</span>-&gt;<span class="hljs-keyword">first</span><span class="hljs-comment"> //访问键</span><br><span class="hljs-keyword">it</span>-&gt;<span class="hljs-keyword">second</span><span class="hljs-comment"> //访问值</span><br></code></pre></td></tr></table></figure><p>比如下面这个例子</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; mp;<br>    mp[<span class="hljs-string">&#x27;m&#x27;</span>]=<span class="hljs-number">20</span>;<br>    mp[<span class="hljs-string">&#x27;r&#x27;</span>]=<span class="hljs-number">30</span>;<br>    mp[<span class="hljs-string">&#x27;a&#x27;</span>]=<span class="hljs-number">40</span>;<br>    <span class="hljs-keyword">for</span>(map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt;::iterator it=mp.<span class="hljs-built_in">begin</span>();it!=mp.<span class="hljs-built_in">end</span>();it++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %d\n&quot;</span>,it-&gt;first,it-&gt;second);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> <span class="hljs-number">40</span><br><span class="hljs-attribute">m</span> <span class="hljs-number">20</span><br><span class="hljs-attribute">r</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>其实由此可见，map会按照键从小到大的顺序自动排序（因为a&lt;m&lt;r）,这个就是类似set的（因为他的底层原理和set一样都是红黑树）</p><h3 id="map常用函数实例解析">map常用函数实例解析</h3><h4 id="find-3">find()</h4><p>find(key)返回键为key的映射的迭代器,时间复杂度O(logN),N为map中映射的个数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; mp;<br>mp[<span class="hljs-string">&#x27;a&#x27;</span>]=<span class="hljs-number">1</span>;<br>mp[<span class="hljs-string">&#x27;b&#x27;</span>]=<span class="hljs-number">2</span>;<br>map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt;::iterator it=mp.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %d&quot;</span>, it-&gt;first,it-&gt;second);<br></code></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">b</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="erase-可以类比set的学习">erase() 可以类比set的学习</h4><ol><li>删除单个元素<ul><li>mp.erase(it),it为需要删除的元素的迭代器，时间复杂度O(1)，可以搭配find()函数使用</li></ul> <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; mp;<br>mp[<span class="hljs-string">&#x27;a&#x27;</span>]=<span class="hljs-number">1</span>;<br>mp[<span class="hljs-string">&#x27;b&#x27;</span>]=<span class="hljs-number">2</span>;<br>map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt;::iterator it=mp.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br>mp.<span class="hljs-built_in">erase</span>(it); <span class="hljs-comment">//删除b 2</span><br></code></pre></td></tr></table></figure><ul><li>mp.erase(key),key为欲删除的映射的键,时间复杂度O(logN)</li></ul> <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; mp;<br>mp[<span class="hljs-string">&#x27;a&#x27;</span>]=<span class="hljs-number">1</span>;<br>mp[<span class="hljs-string">&#x27;b&#x27;</span>]=<span class="hljs-number">2</span>;<br>mp.<span class="hljs-built_in">erase</span>(<span class="hljs-string">&#x27;b&#x27;</span>); <span class="hljs-comment">//删除b 2</span><br></code></pre></td></tr></table></figure></li><li>删除一个区间之内的所有元素<br>mp.erase(first,last),传入的都是迭代器,删除[first,last)内的元素,时间复杂度O(last-first)</li></ol><h4 id="size-3">size()</h4><p>O(1)，获得映射的对数</p><h4 id="clear-4">clear()</h4><p>O(N)</p><h3 id="常见用途">常见用途</h3><ol><li>建立char或者string与int之间的映射</li><li>把map当bool数组使用</li></ol><h2 id="6-5-queue的常见用法详解">6.5 queue的常见用法详解</h2><h2 id="6-6-priority-queue的常见用法详解详解">6.6 priority_queue的常见用法详解详解</h2>]]></content>
    
    
    <categories>
      
      <category>程设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>德语学习经验分享会</title>
    <link href="/2024/11/26/%E5%BE%B7%E8%AF%AD%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB%E4%BC%9A/"/>
    <url>/2024/11/26/%E5%BE%B7%E8%AF%AD%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1>德语学习经验分享会</h1><p><em>2024.11.26</em></p><h2 id="1-王羽芃">1. 王羽芃</h2><h2 id="德语学习进度">德语学习进度</h2><p>大一上 A1</p><p>大一下 A2</p><p>期中考试后B1</p><p>大二上B1-B2</p><p>大二下TestDaF冲刺</p><h2 id="听说读写能力">听说读写能力</h2><h3 id="语法：">语法：</h3><p>A1 -A2：多积累和巩固语法知识</p><h3 id="A2结业考试之后：词汇量">A2结业考试之后：词汇量</h3><p>多联系各个不同的词，词义相近的词</p><p>词有很多前缀，比如sprechen，去搞懂每个前缀对应的含义</p><p>不用记很多很多，重在记得牢、记得精</p><p>掌握单词在语境中的用法</p><p>一位20分学长：一页纸只记两、三个单词，但是一整页都是这个单词在语境中的应用</p><p>多积累固定搭配、积累可分动词</p><h3 id="语感的培养">语感的培养</h3><p>拿到阅读、听力的原文：朗读出来，积累语感</p><h2 id="德福考试">德福考试</h2><h4 id="Test-Deutsch-als-Fremdsprache">Test Deutsch als Fremdsprache</h4><p>3月易、7月难、11月中</p><p>阅读部分：3篇，60min</p><p>作文：60min，给一个图表，描述+讨论问题</p><h2 id="2-殷江民">2.殷江民</h2><h2 id="大一的德语学习">大一的德语学习</h2><h3 id="1-培养语感">1. 培养语感</h3><p>说起来怎么样？听起来怎么样？写起来怎么样？</p><p>放开声读文章，对口型念单词</p><h3 id="2-训练基本功">2.训练基本功</h3><p>基本的词汇、格位、时态、造句</p><h3 id="3-和英语区分开">3.和英语区分开</h3><p>专心学德语，不过有能力还是可以两种语言一起学</p><p>考过四级、大二大三把六级考过去</p><h2 id="大二的德语学习">大二的德语学习</h2><h3 id="1-节奏更快">1.节奏更快</h3><p>需要打好语感和基本功基础</p><h3 id="2-尽量下半学期寒假一过就考一次德福">2. 尽量下半学期寒假一过就考一次德福</h3><h3 id="3-在2的基础上好好听下半学期的德福考试技巧，这样在7月的德福考试可以更从容一点">3. 在2的基础上好好听下半学期的德福考试技巧，这样在7月的德福考试可以更从容一点</h3><h2 id="听力">听力</h2><p>德语初级听力 外语教学与研究出版社，刷刷刷</p><h2 id="阅读">阅读</h2><h3 id="1-新求精的小短文认真读，利用好上课的时间，跟着老师把文中的知识点读透">1.新求精的小短文认真读，利用好上课的时间，跟着老师把文中的知识点读透</h3><h3 id="2-自己课下抽空出声朗读培养语感">2.自己课下抽空出声朗读培养语感</h3><h3 id="3-德福的阅读要刷题-技巧，但是这个听老师讲述的方法就完全够用">3.德福的阅读要刷题+技巧，但是这个听老师讲述的方法就完全够用</h3><h2 id="写作">写作</h2><h3 id="1-大一的写作类似记叙文">1.大一的写作类似记叙文</h3><p>地点、美食、哪里好玩、课余时间喜欢干什么</p><h3 id="2-老师上课的现场练习要认真对待">2.老师上课的现场练习要认真对待</h3><p>积极让老师批改寻找优化点、仔细阅读范文、多背诵</p><h2 id="口语">口语</h2><h3 id="1-大一主要以生活的话题有关：">1.大一主要以生活的话题有关：</h3><p>课余生活、美食、方位，主要是以自己干的事情为主，实事求是为主</p><p>练习方法：</p><ol><li><p>大声朗读课文</p></li><li><p>自己写一段德语日记、描述做了些什么，然后自己默背、潜移默化地就能用德语说了</p></li></ol><h2 id="自测">自测</h2><p>找A1\A2的卷子</p>]]></content>
    
    
    <categories>
      
      <category>德语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>德语</tag>
      
      <tag>经验分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/1970/01/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/1970/01/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><p><img src="/img/test.png" alt="test"></p><h1>文本</h1><p>这是一段正文内容样式，以下是不同文本样式效果： <a href="https://github.com/cayxc/mdmdt">这是超链接样式: https://github.com/cayxc/mdmdt</a>,  <strong>这是加粗文本样式</strong>,  <em>这是斜体字样式</em>,  <code>This is a single line code style</code>,  <u>这是下划线样式</u>,  <s>这是删除线效果样式</s>,  ==这是文字高亮效果==，这是上下标样式: $\LaTeX$, X^2^, H~2~O,  <span style='background:var(--color-2-0-c)'> 这是鼠标选中效果 </span>, 这是键盘键样式：<kbd>Command+Q</kbd>, 这是数学公式： $$ u(t,x,y) = \frac{1}{2\pi c} \frac{\part}{\part t} \iint\limits_{r&lt;ct} \frac{m^2(m+n)}{\sqrt{c^2t^2 -r^2 }}dmdn $$,  这些是图标：🐳 😀 🇨🇳</p><p>This is a text content style and the following are the effects of different text styles: <strong>This is a bold text style</strong>, <a href="https://github.com/cayxc/mdmdt">This is a hyperlink style: https://github.com/cayxc/mdmdt</a>,  <code>This is a single line code style</code>,  <u>This is the underline style</u>, ==This is the text highlighting effect==,  <s>This is the strikethrough effect style</s>,  <em>This is the italic font style</em>, This is the subscript style: $\LaTeX$, X^2^, H~2~O,  This is the keyboard key style: <kbd>Command+Q</kbd>,  <span style='background:var(--color-2-0-c)'>This is the mouse selection effect</span>, This is a mathematical formula: $$ u(t,x,y) = \frac{1}{2\pi c} \frac{\part}{\part t} \iint\limits_{r&lt;ct} \frac{m^2(m+n)}{\sqrt{c^2t^2 -r^2 }}dmdn $$​,  These are icons: 🐳 😀 🇨🇳</p><!-- 这是注释内容......, This is the annotation content --><h1>列表</h1><p>这些是列表样式效果:</p><ol><li>这是有序列表 A</li><li>这是有序列表 B</li></ol><ul><li>This is Item 1.</li><li>This is Item 2.</li><li>[x] Something is Not TODO.</li><li>[ ] Something is DONE.</li></ul><hr><ol><li>这是有序列表 A</li><li>这是有序列表 B<ol><li>这是有序列表 A</li><li>这是有序列表 B</li></ol></li></ol><ul><li>This is Item 1.</li><li>This is Item 2.<ul><li>This is Item 1.</li><li>This is Item 2.</li></ul></li></ul><hr><p>这是嵌套列表样式：</p><ol><li>这是有序列表 A</li><li>这是有序列表 B<ul><li>This is Item 1.</li><li>This is Item 2.<ul><li>[x] Something is Not TODO.</li><li>[ ] Something is DONE.</li></ul></li></ul></li></ol><ul><li>这是有序列表 A</li><li>这是有序列表 B<ol><li>This is Item 1.</li><li>This is Item 2.<ul><li>[ ] Something is Not TODO.</li><li>[x] Something is DONE.</li></ul></li></ol></li></ul><h1>代码</h1><p>单行代码样式：<code>composer require --dev barryvdh/laravel-ide-helper</code></p><p>大段代码块样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * ----------------------------------------</span><br><span class="hljs-comment">  * 设置递增的 level 编号</span><br><span class="hljs-comment">  * ----------------------------------------</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> tag obj 标签对象</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-title function_">setLevelNumber</span> (tag) &#123;<br>   <span class="hljs-keyword">try</span> &#123;<br>     <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">typeof</span> tag) != <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;setLevelNumber() 调用时参数类型错误，必须是一个h标签的对象集合！&#x27;</span>;<br>     &#125;<br>     <span class="hljs-keyword">let</span> str = tag.<span class="hljs-property">id</span>;<br>     <span class="hljs-keyword">if</span> (str.<span class="hljs-property">lastIndexOf</span> (<span class="hljs-string">&#x27;.&#x27;</span>) == - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//如果是一级目录形式 level-1000</span><br>        <span class="hljs-keyword">let</span> newValue = <span class="hljs-built_in">parseInt</span> (str.<span class="hljs-property">slice</span> (<span class="hljs-number">6</span>))+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;level-&#x27;</span>+newValue;<br>     &#125;<br>   &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> err;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h1>表格样式</h1><table><thead><tr><th style="text-align:left">Left-Aligned</th><th style="text-align:center">Center Aligned</th><th style="text-align:right">Right Aligned</th></tr></thead><tbody><tr><td style="text-align:left">This is the first line</td><td style="text-align:center"><code>this is code</code> some wordy text and some code</td><td style="text-align:right">$160</td></tr><tr><td style="text-align:left">This is the second line</td><td style="text-align:center">some code: <code>this is code</code> centered</td><td style="text-align:right">$1200.99</td></tr><tr><td style="text-align:left">This is the third line</td><td style="text-align:center">These are some texts</td><td style="text-align:right">$125.5</td></tr></tbody></table><h1>引用文本框</h1><blockquote><p>[!NOTE]</p><p>This is a Note text box … <code>this is code style</code></p><blockquote><p>This is a Note text box …</p></blockquote></blockquote><blockquote><p>[!TIP]</p><p>This is a Tip text box …</p></blockquote><blockquote><p>[!IMPORTANT]</p><p>This is a Important text box …</p></blockquote><blockquote><p>[!WARNING]</p><p>This is a Warning text box …</p></blockquote><blockquote><p>[!CAUTION]</p><p>This is a Caution text box …</p></blockquote><h1>一级标题1</h1><h2 id="二级标题2">二级标题2</h2><h3 id="三级标题3">三级标题3</h3><h4 id="四级标题4">四级标题4</h4><h5 id="五级标题5">五级标题5</h5><h6 id="六级标题6">六级标题6</h6>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
